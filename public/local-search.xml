<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>把hexo博客部署到windows服务器中</title>
    <link href="/2021/02/27/%E6%8A%8A%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD/"/>
    <url>/2021/02/27/%E6%8A%8A%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h4 id="1、用搜索搜到远程桌面连接工具，用远程桌面连接连接到服务器，然后输入设置的账号密码"><a href="#1、用搜索搜到远程桌面连接工具，用远程桌面连接连接到服务器，然后输入设置的账号密码" class="headerlink" title="1、用搜索搜到远程桌面连接工具，用远程桌面连接连接到服务器，然后输入设置的账号密码"></a>1、用搜索搜到远程桌面连接工具，用远程桌面连接连接到服务器，然后输入设置的账号密码</h4><p><img src="http://hkctfsys.com/img/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5.png" alt="远程桌面连接"></p><h4 id="2、把IE增强的安全配置给关了（安全就代表麻烦），win-gt-服务器管理器-gt-IE增强的安全配置：启动点进去然后关闭"><a href="#2、把IE增强的安全配置给关了（安全就代表麻烦），win-gt-服务器管理器-gt-IE增强的安全配置：启动点进去然后关闭" class="headerlink" title="2、把IE增强的安全配置给关了（安全就代表麻烦），win-&gt;服务器管理器-&gt;IE增强的安全配置：启动点进去然后关闭"></a>2、把IE增强的安全配置给关了（安全就代表麻烦），win-&gt;服务器管理器-&gt;IE增强的安全配置：启动点进去然后关闭</h4><h4 id="3、下载宝塔-选windows版本，点下载，用来集成配置服务器的好工具"><a href="#3、下载宝塔-选windows版本，点下载，用来集成配置服务器的好工具" class="headerlink" title="3、下载宝塔,选windows版本，点下载，用来集成配置服务器的好工具"></a>3、下载<a href="https://www.bt.cn/">宝塔</a>,选windows版本，点下载，用来集成配置服务器的好工具</h4><p><img src="http://hkctfsys.com/img/%E5%AE%9D%E5%A1%94%E8%BF%9B%E5%85%A5%E7%95%8C%E9%9D%A2.png" alt="宝塔进入界面"></p><h4 id="4、点击打开，登陆，创建一个宝塔账号，然后，进入，选Apach和Nginx套餐都可以"><a href="#4、点击打开，登陆，创建一个宝塔账号，然后，进入，选Apach和Nginx套餐都可以" class="headerlink" title="4、点击打开，登陆，创建一个宝塔账号，然后，进入，选Apach和Nginx套餐都可以"></a>4、点击打开，登陆，创建一个宝塔账号，然后，进入，选Apach和Nginx套餐都可以</h4><p>5、宝塔先放放，等下再绑定域名，现在先下载**<a href="http://hkctfsys.com/Git-2.30.0.2-64-bit.exe">git</a><strong>和</strong><a href="http://hkctfsys.com/node-v15.10.0-x64.msi">node</a>  **，可能不是最新版的也可以去官网下载</p><p>下载完之后安装，一直点next就行</p><p>6、右键打开git，点击gitbosh安装hexo，创建一个hexo名字的或者任何名字的文件夹，进去，然后右击点git bosh</p><pre><code class="hljs undefined">npm install -g hexo-cli</code></pre><p>初始化hexo程序，如果有hexo 的人可以直接把hexo文件复制进去就可</p><pre><code class="hljs kotlin">hexo <span class="hljs-keyword">init</span></code></pre><p>然后输入</p><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span></code></pre><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span></code></pre><p>打开网页，输入<a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到hexo界面了，说明成功一大半了</p><p>![hexo界面]([<a href="http://hkctfsys.com//imghexo%20%E7%95%8C%E9%9D%A2.png]">http://hkctfsys.com//imghexo%20%E7%95%8C%E9%9D%A2.png]</a>(<a href="http://hkctfsys.com//imghexo">http://hkctfsys.com//imghexo</a> 界面.png))</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我为什么不用golang写PAT了</title>
    <link href="/2021/02/26/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8golang%E5%86%99PTA%E4%BA%86/"/>
    <url>/2021/02/26/%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8golang%E5%86%99PTA%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h4 id="先说说我为什么要用golang写算法题"><a href="#先说说我为什么要用golang写算法题" class="headerlink" title="先说说我为什么要用golang写算法题"></a>先说说我为什么要用golang写算法题</h4><ul><li>第一是想让我熟练使用golang语言的各种库，熟悉基础语法，比如go没while循环。。。</li><li>第二是go语言的性能比较高效，最快能与c语言相同，并且与c语言比较，golang库完善编写比如排序只需要调用函数就行，比较简单，c语言就要用到c++的东西，挺麻烦的，还要手写cmp函数。</li></ul><h4 id="再说说为什么我不再用golang写PAT了"><a href="#再说说为什么我不再用golang写PAT了" class="headerlink" title="再说说为什么我不再用golang写PAT了"></a>再说说为什么我不再用golang写PAT了</h4><ul><li>第一是因为你网上找不到用golang写PAT的人（力扣倒是挺多的，而且力扣比较人性化，会把测试用例错误答案和正确答案给你列出来，而且有社区，但是PAT锻炼了你的独立思考能力，自己思考错哪边了），就算写错了自己找不出原因的时候也没地方借鉴</li><li>第二因为golang他速度只是最快能到c，有些时候会不达到，然后PAT他的<strong>运行时间卡的比较紧</strong>，举例一道简单题PAT乙级 <a herf="sets/994805260223102976/problems/994805289432236032)"> 1032挖掘技术那家强 </a></li></ul><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,a,b,maxi <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> score [<span class="hljs-number">120000</span>]<span class="hljs-keyword">int</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)     <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        fmt.Scanf(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;a,&amp;b)        score[a]+=b    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;=n;i++&#123;        <span class="hljs-keyword">if</span> score[maxi]&lt;score[i]&#123;            maxi = i        &#125;    &#125;    fmt.Println(maxi,score[maxi])&#125;</code></pre><p>这道题用golang写最后一个测试点会是运行超时，如果要做的话得考虑用并发实现了，这样做一道题太费时间了，考场里面用这种方法不太可行，也用golang写了30多道题目了，锻炼效果应该差不多，现在开始用c语言写题目温习一下c语言技巧和排序的使用，加油考试吧，虽然只是个对别人来说简简单单的乙级。</p>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1082 射击比赛</title>
    <link href="/2021/02/25/PAT/1082%20%E5%B0%84%E5%87%BB%E6%AF%94%E8%B5%9B/"/>
    <url>/2021/02/25/PAT/1082%20%E5%B0%84%E5%87%BB%E6%AF%94%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h3 id="射击比赛"><a href="#射击比赛" class="headerlink" title="射击比赛"></a><font size=6px>射击比赛</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出一个正整数 N（≤ 10 000）。随后 N 行，每行按下列格式给出：</p><pre><code class="hljs gml">ID <span class="hljs-symbol">x</span> <span class="hljs-symbol">y</span></code></pre><p>其中 <code>ID</code> 是运动员的编号（由 4 位数字组成）；<code>x</code> 和 <code>y</code> 是其打出的弹洞的平面坐标(<code>x</code>,<code>y</code>)，均为整数，且 0 ≤ |<code>x</code>|, |<code>y</code>| ≤ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">30001 5 71020 -1 30233 0 -1</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">0233 0001</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>创立一个10002的数组，记得是float类型的，输入完成之后就遍历这10000个数字找最大最小值</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> b,id,n,c,maxi,mini <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> max,min <span class="hljs-keyword">float64</span>    max = <span class="hljs-number">0</span>    min = <span class="hljs-number">10000</span>    <span class="hljs-keyword">var</span> score [<span class="hljs-number">10002</span>]<span class="hljs-keyword">float64</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10000</span>;i++&#123;        score[i]= <span class="hljs-number">-1</span>    &#125;    fmt.Scan(&amp;n)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        fmt.Scanf(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;id,&amp;b,&amp;c)        score[id]=math.Sqrt(<span class="hljs-keyword">float64</span>(c*c+b*b))    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++&#123;        <span class="hljs-keyword">if</span> score[i]!=<span class="hljs-number">-1</span>&#123;            <span class="hljs-keyword">if</span> score[i]&gt;max&#123;                max = score[i]                maxi =i            &#125;            <span class="hljs-keyword">if</span> score[i]&lt;min&#123;                min = score[i]                mini = i            &#125;        &#125;    &#125;    fmt.Printf(<span class="hljs-string">&quot;%04d %04d\n&quot;</span>,mini,maxi)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1048 数字加密</title>
    <link href="/2021/02/24/PAT/1048%20%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/"/>
    <url>/2021/02/24/PAT/1048%20%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="数字加密"><a href="#数字加密" class="headerlink" title="数字加密"></a><font size=6px>数字加密</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出加密后的结果。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">1234567 368782971</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">3695Q8118</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>这个题目没有讲明白，如果两个字串长度不一样长，要在短的那个字符前面前面补零，还有一个坑的地方就是他题目说的第一个数字就是字符串的最后一个数字，所以要逆置接受，然后长度不相等在后面补零，得出结果再逆置输出</p><pre><code class="hljs armasm"><span class="hljs-comment">//这段代码在输入样例里面只会执行一次，因为一次s1=&quot;0&quot;+s1会使s1长度增加使for语句实际执行次数少一半，和c语言不同</span><span class="hljs-symbol">for</span> i:<span class="hljs-number">=0</span><span class="hljs-comment">;i&lt;len(s2)-len(s1);i++&#123;</span>            fmt.Println(<span class="hljs-built_in">s1</span>)            <span class="hljs-built_in">s1</span>=<span class="hljs-string">&quot;0&quot;</span>+<span class="hljs-built_in">s1</span>        &#125;</code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;strconv&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> s1,s2,s3 <span class="hljs-keyword">string</span>    list :=[<span class="hljs-number">13</span>]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>&#125;    <span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int</span>    fmt.Scan(&amp;s1,&amp;s2)    s1=reverse(s1)    s2=reverse(s2)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s1)&lt;<span class="hljs-built_in">len</span>(s2)&#123;        a:=<span class="hljs-built_in">len</span>(s2)-<span class="hljs-built_in">len</span>(s1)        <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;a;i++&#123;            s1+=<span class="hljs-string">&quot;0&quot;</span>        &#125;    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s1)&gt;<span class="hljs-built_in">len</span>(s2)&#123;        a:=<span class="hljs-built_in">len</span>(s1)-<span class="hljs-built_in">len</span>(s2)        <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;a;i++&#123;            s2+=<span class="hljs-string">&quot;0&quot;</span>        &#125;    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s1);i++&#123;        <span class="hljs-comment">//如果为个位</span>        <span class="hljs-keyword">if</span> i %<span class="hljs-number">2</span>==<span class="hljs-number">0</span>&#123;            sum = (<span class="hljs-keyword">int</span>(s1[i]-<span class="hljs-string">&#x27;0&#x27;</span>)+<span class="hljs-keyword">int</span>(s2[i]-<span class="hljs-string">&#x27;0&#x27;</span>))%<span class="hljs-number">13</span>            s3+=list[sum]        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">//如果为偶位</span>            sum = <span class="hljs-keyword">int</span>(s2[i]-<span class="hljs-string">&#x27;0&#x27;</span>)-<span class="hljs-keyword">int</span>(s1[i]-<span class="hljs-string">&#x27;0&#x27;</span>)            <span class="hljs-keyword">if</span> sum&lt;<span class="hljs-number">0</span>&#123;                sum+=<span class="hljs-number">10</span>            &#125;            s3+=strconv.Itoa(sum)        &#125;    &#125;    fmt.Println(reverse(s3))&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span><span class="hljs-title">string</span></span>&#123;    re:=[]<span class="hljs-keyword">rune</span>(s)    n:=<span class="hljs-built_in">len</span>(re)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++&#123;        temp:=re[i]        re[i]=re[n-i<span class="hljs-number">-1</span>]        re[n-i<span class="hljs-number">-1</span>]=temp    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">string</span>(re)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1017 A除以B</title>
    <link href="/2021/02/23/PAT/1017%20A%E9%99%A4%E4%BB%A5B/"/>
    <url>/2021/02/23/PAT/1017%20A%E9%99%A4%E4%BB%A5B/</url>
    
    <content type="html"><![CDATA[<h3 id="A除以B"><a href="#A除以B" class="headerlink" title="A除以B"></a><font size=6px>A除以B</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>本题要求计算 <em>A</em>/<em>B</em>，其中 <em>A</em> 是不超过 1000 位的正整数，<em>B</em> 是 1 位正整数。你需要输出商数 <em>Q</em> 和余数 <em>R</em>，使得 <em>A</em>=<em>B</em>×<em>Q</em>+<em>R</em> 成立。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 <em>A</em> 和 <em>B</em>，中间以 1 空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中依次输出 <em>Q</em> 和 <em>R</em>，中间以 1 空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">123456789050987654321 7</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">17636684150141093474 3</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>无</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;strconv&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> s,q <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> num,sum <span class="hljs-keyword">int</span>    fmt.Scan(&amp;s,&amp;num)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s);i++&#123;        sum=sum*<span class="hljs-number">10</span>+<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)&gt;<span class="hljs-number">1</span>&#123;            <span class="hljs-keyword">if</span> i!=<span class="hljs-number">0</span>&#123;                q=q+strconv.Itoa(sum/num)                sum %= num            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            q=q+strconv.Itoa(sum/num)            sum %= num        &#125;    &#125;    fmt.Printf(<span class="hljs-string">&quot;%s %d\n&quot;</span>,q,sum)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1033 旧键盘打字</title>
    <link href="/2021/02/23/PAT/1033%20%E6%97%A7%E9%94%AE%E7%9B%98%E6%89%93%E5%AD%97/"/>
    <url>/2021/02/23/PAT/1033%20%E6%97%A7%E9%94%AE%E7%9B%98%E6%89%93%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="旧键盘打字"><a href="#旧键盘打字" class="headerlink" title="旧键盘打字"></a><font size=6px>旧键盘打字</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 105 个字符的串。可用的字符包括字母 [<code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>]、数字 <code>0</code>-<code>9</code>、以及下划线 <code>_</code>（代表空格）、<code>,</code>、<code>.</code>、<code>-</code>、<code>+</code>（代表上档键）。题目保证第 2 行输入的文字串非空。</p><p>注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">7+IE.7_This_is_a_test.</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">_hs_s_a_tst</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h6 id="题读错了，我以为、-、-、-、-（代表上档键）代表上档键，其实只有加号才代表上挡键，s1有可能是空行。"><a href="#题读错了，我以为、-、-、-、-（代表上档键）代表上档键，其实只有加号才代表上挡键，s1有可能是空行。" class="headerlink" title="题读错了，我以为、,、.、-、+（代表上档键）代表上档键，其实只有加号才代表上挡键，s1有可能是空行。"></a>题读错了，我以为、<code>,</code>、<code>.</code>、<code>-</code>、<code>+</code>（代表上档键）代表上档键，其实只有加号才代表上挡键，s1有可能是空行。</h6><h6 id="思路：只要这个字母出现过，就把acs【i】置1，最后判断s2中的字母的asc值是否为1，是0就输出。"><a href="#思路：只要这个字母出现过，就把acs【i】置1，最后判断s2中的字母的asc值是否为1，是0就输出。" class="headerlink" title="思路：只要这个字母出现过，就把acs【i】置1，最后判断s2中的字母的asc值是否为1，是0就输出。"></a>思路：只要这个字母出现过，就把acs【i】置1，最后判断s2中的字母的asc值是否为1，是0就输出。</h6><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> asc [<span class="hljs-number">128</span>]<span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> flag <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> s1,s2,s3 <span class="hljs-keyword">string</span>    fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s1)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s1);i++&#123;        <span class="hljs-keyword">if</span> s1[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;s1[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>&#123;            asc[s1[i]+<span class="hljs-number">32</span>]=<span class="hljs-number">1</span>        &#125;        asc[s1[i]]=<span class="hljs-number">1</span>    &#125;    <span class="hljs-keyword">if</span> asc[<span class="hljs-string">&#x27;+&#x27;</span>]==<span class="hljs-number">1</span>&#123;        <span class="hljs-keyword">for</span> i:=<span class="hljs-string">&#x27;A&#x27;</span>;i&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>;i++&#123;            asc[i]=<span class="hljs-number">1</span>        &#125;    &#125;    fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s2)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s2);i++&#123;        <span class="hljs-keyword">if</span> asc[s2[i]]==<span class="hljs-number">0</span>&#123;            fmt.Printf(<span class="hljs-string">&quot;%c&quot;</span>,s2[i])        &#125;    &#125;    fmt.Print(s3)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1067 试密码</title>
    <link href="/2021/02/23/PAT/1067%20%E8%AF%95%E5%AF%86%E7%A0%81/"/>
    <url>/2021/02/23/PAT/1067%20%E8%AF%95%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="试密码"><a href="#试密码" class="headerlink" title="试密码"></a><font size=6px>试密码</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（≤ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 <code>Welcome in</code>，并结束程序；如果是错误的，则在一行中按格式输出 <code>Wrong password: 用户输入的错误密码</code>；当错误尝试达到 N 次时，再输出一行 <code>Account locked</code>，并结束程序。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="hljs in">Correct%pw 3correct%pwCorrect@PWwhatisthepassword!Correct%pw#</code></pre><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="hljs out">Wrong password: correct%pwWrong password: Correct@PWWrong password: whatisthepassword!Account locked</code></pre><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="hljs in">cool@gplt 3coolman@gpltcoollady@gpltcool@gplttry again#</code></pre><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="hljs out">Wrong password: coolman@gpltWrong password: coollady@gpltWelcome in</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>有个地方需要注意一下，输入的密码有可能包含空格，所以要用bufio来输入</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;bufio&quot;</span>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> s,password <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> n,flag <span class="hljs-keyword">int</span>    fmt.Scan(&amp;password,&amp;n)    r:=bufio.NewReader(os.Stdin)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        s,_=r.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)        s=strings.Replace(s,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">-1</span>)        <span class="hljs-keyword">if</span> s==<span class="hljs-string">&quot;#&quot;</span>&#123;            <span class="hljs-keyword">return</span>        &#125;        <span class="hljs-keyword">if</span> s==password&#123;            fmt.Println(<span class="hljs-string">&quot;Welcome in&quot;</span>)            flag=<span class="hljs-number">1</span>            <span class="hljs-keyword">break</span>        &#125;<span class="hljs-keyword">else</span>&#123;            fmt.Printf(<span class="hljs-string">&quot;Wrong password: %s\n&quot;</span>,s)        &#125;    &#125;    <span class="hljs-keyword">if</span> flag==<span class="hljs-number">0</span>&#123;        fmt.Println(<span class="hljs-string">&quot;Account locked&quot;</span>)    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1044 火星数字</title>
    <link href="/2021/02/23/PAT/1044%20%E7%81%AB%E6%98%9F%E6%95%B0%E5%AD%97/"/>
    <url>/2021/02/23/PAT/1044%20%E7%81%AB%E6%98%9F%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="火星数字"><a href="#火星数字" class="headerlink" title="火星数字"></a><font size=6px>火星数字</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>火星人是以 13 进制计数的：</p><ul><li>地球人的 0 被火星人称为 tret。</li><li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li><li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。</li></ul><p>例如地球人的数字 <code>29</code> 翻译成火星文就是 <code>hel mar</code>；而火星文 <code>elo nov</code> 对应地球数字 <code>115</code>。为了方便交流，请你编写程序实现地球和火星数字之间的互译。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 <em>N</em>（&lt;100），随后 <em>N</em> 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">4295elo novtam</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">hel marmay11513</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>题目不难，我用switch-case做就显得冗长，但是好理解，用c[0]判断是数字还是字符，然后分别判断</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;bufio&quot;</span>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>    <span class="hljs-string">&quot;strconv&quot;</span>    <span class="hljs-string">&quot;strings&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,result <span class="hljs-keyword">int</span>    fmt.Scan(&amp;n)    r:=bufio.NewReader(os.Stdin)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        c,_:=r.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)        <span class="hljs-comment">//如果是数字，就转换成字母</span>        <span class="hljs-keyword">if</span> c[<span class="hljs-number">0</span>] &gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c[<span class="hljs-number">0</span>]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&#123;            <span class="hljs-comment">//把c最后换行符取消掉</span>            c=strings.Replace(c,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">-1</span>)            num,_ :=strconv.Atoi(c)            <span class="hljs-comment">//如果可以用13整除</span>            <span class="hljs-keyword">if</span> num % <span class="hljs-number">13</span>==<span class="hljs-number">0</span>&#123;                <span class="hljs-keyword">switch</span> (num/<span class="hljs-number">13</span>) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:                    fmt.Printf(<span class="hljs-string">&quot;tret\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:                    fmt.Printf(<span class="hljs-string">&quot;tam\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:                    fmt.Printf(<span class="hljs-string">&quot;hel\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:                    fmt.Printf(<span class="hljs-string">&quot;maa\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:                    fmt.Printf(<span class="hljs-string">&quot;huh\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:                    fmt.Printf(<span class="hljs-string">&quot;tou\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:                    fmt.Printf(<span class="hljs-string">&quot;kes\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:                    fmt.Printf(<span class="hljs-string">&quot;hei\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:                    fmt.Printf(<span class="hljs-string">&quot;elo\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:                    fmt.Printf(<span class="hljs-string">&quot;syy\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:                    fmt.Printf(<span class="hljs-string">&quot;lok\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:                    fmt.Printf(<span class="hljs-string">&quot;mer\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:                    fmt.Printf(<span class="hljs-string">&quot;jou\n&quot;</span>)                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">if</span> num/<span class="hljs-number">13</span>!=<span class="hljs-number">0</span>&#123;                    <span class="hljs-keyword">switch</span> (num/<span class="hljs-number">13</span>) &#123;                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:                        fmt.Printf(<span class="hljs-string">&quot;tam &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:                        fmt.Printf(<span class="hljs-string">&quot;hel &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:                        fmt.Printf(<span class="hljs-string">&quot;maa &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:                        fmt.Printf(<span class="hljs-string">&quot;huh &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:                        fmt.Printf(<span class="hljs-string">&quot;tou &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:                        fmt.Printf(<span class="hljs-string">&quot;kes &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:                        fmt.Printf(<span class="hljs-string">&quot;hei &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:                        fmt.Printf(<span class="hljs-string">&quot;elo &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:                        fmt.Printf(<span class="hljs-string">&quot;syy &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:                        fmt.Printf(<span class="hljs-string">&quot;lok &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:                        fmt.Printf(<span class="hljs-string">&quot;mer &quot;</span>)                    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:                        fmt.Printf(<span class="hljs-string">&quot;jou &quot;</span>)                    &#125;                &#125;                <span class="hljs-keyword">switch</span> (num % <span class="hljs-number">13</span>) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:                    fmt.Printf(<span class="hljs-string">&quot;jan\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:                    fmt.Printf(<span class="hljs-string">&quot;feb\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:                    fmt.Printf(<span class="hljs-string">&quot;mar\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:                    fmt.Printf(<span class="hljs-string">&quot;apr\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:                    fmt.Printf(<span class="hljs-string">&quot;may\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:                    fmt.Printf(<span class="hljs-string">&quot;jun\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:                    fmt.Printf(<span class="hljs-string">&quot;jly\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:                    fmt.Printf(<span class="hljs-string">&quot;aug\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:                    fmt.Printf(<span class="hljs-string">&quot;sep\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:                    fmt.Printf(<span class="hljs-string">&quot;oct\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:                    fmt.Printf(<span class="hljs-string">&quot;nov\n&quot;</span>)                <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:                    fmt.Printf(<span class="hljs-string">&quot;dec\n&quot;</span>)                &#125;            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">//是字符串怎么办</span>            c:=strings.Replace(c,<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">-1</span>)            c1:=strings.Split(c,<span class="hljs-string">&quot; &quot;</span>)            <span class="hljs-keyword">for</span> _,v:= <span class="hljs-keyword">range</span> c1&#123;                <span class="hljs-keyword">switch</span> (v) &#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tam&quot;</span>:                    result+=<span class="hljs-number">1</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hel&quot;</span>:                    result+=<span class="hljs-number">2</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;maa&quot;</span>:                    result+=<span class="hljs-number">3</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;huh&quot;</span>:                    result+=<span class="hljs-number">4</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tou&quot;</span>:                    result+=<span class="hljs-number">5</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;kes&quot;</span>:                    result+=<span class="hljs-number">6</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hei&quot;</span>:                    result+=<span class="hljs-number">7</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;elo&quot;</span>:                    result+=<span class="hljs-number">8</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;syy&quot;</span>:                    result+=<span class="hljs-number">9</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;lok&quot;</span>:                    result+=<span class="hljs-number">10</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;mer&quot;</span>:                    result+=<span class="hljs-number">11</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;jou&quot;</span>:                    result+=<span class="hljs-number">12</span>*<span class="hljs-number">13</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;tret&quot;</span>:                    result+=<span class="hljs-number">0</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;jan&quot;</span>:                    result+=<span class="hljs-number">1</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;feb&quot;</span>:                    result+=<span class="hljs-number">2</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;mar&quot;</span>:                    result+=<span class="hljs-number">3</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;apr&quot;</span>:                    result+=<span class="hljs-number">4</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;may&quot;</span>:                    result+=<span class="hljs-number">5</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;jun&quot;</span>:                    result+=<span class="hljs-number">6</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;jly&quot;</span>:                    result+=<span class="hljs-number">7</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;aug&quot;</span>:                    result+=<span class="hljs-number">8</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sep&quot;</span>:                    result+=<span class="hljs-number">9</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;oct&quot;</span>:                    result+=<span class="hljs-number">10</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;nov&quot;</span>:                    result+=<span class="hljs-number">11</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;dec&quot;</span>:                    result+=<span class="hljs-number">12</span>                &#125;            &#125;            fmt.Println(result)            result=<span class="hljs-number">0</span>        &#125;    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1065 单身狗</title>
    <link href="/2021/02/22/PAT/1065%20%E5%8D%95%E8%BA%AB%E7%8B%97/"/>
    <url>/2021/02/22/PAT/1065%20%E5%8D%95%E8%BA%AB%E7%8B%97/</url>
    
    <content type="html"><![CDATA[<h3 id="单身狗"><a href="#单身狗" class="headerlink" title="单身狗"></a><font size=6px>单身狗</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 N（≤ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（≤ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">311111 2222233333 4444455555 66666755555 44444 10000 88888 22222 11111 23333</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">510000 23333 44444 55555 88888</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-comment">//最后两个测试点会超时</span><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;sort&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> s1,s2 <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> id []<span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> flag [<span class="hljs-number">10001</span>]<span class="hljs-keyword">int</span>    mp:= <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>,<span class="hljs-number">50001</span>)    fmt.Scan(&amp;n)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        fmt.Scan(&amp;s1,&amp;s2)        <span class="hljs-keyword">if</span> s1&gt;s2&#123;            mp[s2]=s1        &#125;<span class="hljs-keyword">else</span> &#123;            mp[s1]=s2        &#125;    &#125;    fmt.Scan(&amp;n)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        fmt.Scan(&amp;s1)        id = <span class="hljs-built_in">append</span>(id,s1)    &#125;    sort.Strings(id)    result:=n    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        <span class="hljs-keyword">if</span> flag[i]==<span class="hljs-number">0</span>&amp;&amp;mp[id[i]]!=<span class="hljs-string">&quot;0&quot;</span>&#123;            <span class="hljs-keyword">for</span> k:=i+<span class="hljs-number">1</span>;k&lt;n;k++&#123;                <span class="hljs-keyword">if</span> mp[id[i]]==id[k]&#123;                    flag[i]=<span class="hljs-number">1</span>                    flag[k]=<span class="hljs-number">1</span>                    result-=<span class="hljs-number">2</span>                    <span class="hljs-keyword">break</span>                &#125;            &#125;        &#125;    &#125;    fmt.Println(result)    first:=<span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        <span class="hljs-keyword">if</span> flag[i]==<span class="hljs-number">0</span>&#123;            <span class="hljs-keyword">if</span> first==<span class="hljs-number">0</span>&#123;                fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>,id[i])                first=<span class="hljs-number">1</span>            &#125;<span class="hljs-keyword">else</span>&#123;                fmt.Printf(<span class="hljs-string">&quot; %s&quot;</span>,id[i])            &#125;        &#125;    &#125;   &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1008 数组元素循环右移问题</title>
    <link href="/2021/02/21/PAT/1008%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB%E9%97%AE%E9%A2%98/"/>
    <url>/2021/02/21/PAT/1008%20%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="数组元素循环右移问题"><a href="#数组元素循环右移问题" class="headerlink" title="数组元素循环右移问题"></a><font size=6px>数组元素循环右移问题</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>0<em>A</em>1⋯<em>A**N</em>−1）变换为（<em>A**N</em>−<em>M</em>⋯<em>A**N</em>−1<em>A</em>0<em>A</em>1⋯<em>A**N</em>−<em>M</em>−1）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="hljs in">6 21 2 3 4 5 6</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="hljs out">5 6 1 2 3 4</code></pre><h4 id="思路-题目简单，可是用golang始终有个测试点过不了-换c"><a href="#思路-题目简单，可是用golang始终有个测试点过不了-换c" class="headerlink" title="思路:题目简单，可是用golang始终有个测试点过不了,换c"></a>思路:题目简单，可是用golang始终有个测试点过不了,换c</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-keyword">int</span> a[<span class="hljs-number">201</span>],i,j,n,m;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<span class="hljs-keyword">if</span>(m&gt;n) m=m%n;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);a[i+n]=a[i];&#125;<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;a[i]=a[<span class="hljs-number">2</span>*n-m+i];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);&#125;<span class="hljs-keyword">for</span>(i=m;i&lt;n;i++)&#123;a[i]=a[n-m+i];<span class="hljs-keyword">if</span>(i!=n<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<span class="hljs-keyword">else</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a[i]);&#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1027 打印沙漏</title>
    <link href="/2021/02/21/PAT/1027%20%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/"/>
    <url>/2021/02/21/PAT/1027%20%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="打印沙漏"><a href="#打印沙漏" class="headerlink" title="打印沙漏"></a><font size=6px>打印沙漏</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><pre><code class="hljs asciidoc">****<span class="hljs-strong">*</span><span class="hljs-strong"> *</span>*<span class="hljs-strong">*</span><span class="hljs-strong">  *</span><span class="hljs-code"> ***</span>****<span class="hljs-strong">*</span></code></pre><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="hljs in">19 *</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="hljs out">***** ***  * ********2</code></pre><h4 id="思路-简答题，无"><a href="#思路-简答题，无" class="headerlink" title="思路:简答题，无"></a>思路:简答题，无</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> num,sum,i <span class="hljs-keyword">int</span>    fmt.Scan(&amp;num,&amp;s)    sum=<span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">1001</span>;i++&#123;        <span class="hljs-keyword">if</span> sum&gt;num&#123;            sum=sum-(<span class="hljs-number">4</span>*i)+<span class="hljs-number">6</span>            <span class="hljs-keyword">break</span>        &#125;        sum+=<span class="hljs-number">4</span>*i<span class="hljs-number">-2</span>    &#125;    i=i<span class="hljs-number">-2</span>   <span class="hljs-comment">//打印上面的三角</span>    <span class="hljs-keyword">for</span> j:=i;j&gt;<span class="hljs-number">0</span>;j--&#123;        <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;i-j;k++&#123;            fmt.Printf(<span class="hljs-string">&quot; &quot;</span>)        &#125;        <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;j*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;k++&#123;            fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>,s)        &#125;        fmt.Printf(<span class="hljs-string">&quot;\n&quot;</span>)    &#125;   <span class="hljs-comment">//打印下面的三角</span>   <span class="hljs-keyword">for</span> j:=<span class="hljs-number">2</span>;j&lt;=i;j++&#123;       <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;i-j;k++&#123;           fmt.Printf(<span class="hljs-string">&quot; &quot;</span>)       &#125;       <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;j*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;k++&#123;           fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>,s)       &#125;       fmt.Printf(<span class="hljs-string">&quot;\n&quot;</span>)   &#125;   <span class="hljs-comment">//输出剩下没用掉的符号数</span>   fmt.Println(num-sum)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1069 微博转发抽奖</title>
    <link href="/2021/02/21/PAT/1069%20%E5%BE%AE%E5%8D%9A%E8%BD%AC%E5%8F%91%E6%8A%BD%E5%A5%96/"/>
    <url>/2021/02/21/PAT/1069%20%E5%BE%AE%E5%8D%9A%E8%BD%AC%E5%8F%91%E6%8A%BD%E5%A5%96/</url>
    
    <content type="html"><![CDATA[<h3 id="微博转发抽奖"><a href="#微博转发抽奖" class="headerlink" title="微博转发抽奖"></a><font size=6px>微博转发抽奖</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出三个正整数 M（≤ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。</p><p>注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 <code>Keep going...</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="hljs in">9 3 2Imgonnawin!PickMePickMeMeMeeeLookHereImgonnawin!TryAgainAgainTryAgainAgainImgonnawin!TryAgainAgain</code></pre><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="hljs out">PickMeImgonnawin!TryAgainAgain</code></pre><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="hljs in">2 3 5Imgonnawin!PickMe</code></pre><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="hljs out">Keep going...</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>先输出第一个数，开始计数，每隔n个输出人名，并用map判断有没有之前就拿奖。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> m,n,s,interval <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> name <span class="hljs-keyword">string</span>    mp:=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>,<span class="hljs-number">1001</span>)    fmt.Scan(&amp;m,&amp;n,&amp;s)    <span class="hljs-keyword">if</span> s&gt;m&#123;        fmt.Println(<span class="hljs-string">&quot;Keep going...&quot;</span>)        <span class="hljs-keyword">return</span>    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;=m;i++&#123;            <span class="hljs-comment">//先输出第一个</span>            <span class="hljs-keyword">if</span> i==s&#123;                fmt.Scan(&amp;name)                fmt.Println(name)                mp[name]=<span class="hljs-number">1</span>                <span class="hljs-comment">//输出一个个之后开始计数</span>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i&gt;s&#123;                fmt.Scan(&amp;name)                interval++                <span class="hljs-keyword">if</span> interval ==n&#123;                    <span class="hljs-keyword">if</span> mp[name]==<span class="hljs-number">1</span>&#123;                        interval--                    &#125;<span class="hljs-keyword">else</span>&#123;                        fmt.Println(name)                        mp[name]=<span class="hljs-number">1</span>                        interval=<span class="hljs-number">0</span>                    &#125;                &#125;            &#125;<span class="hljs-keyword">else</span> &#123;                fmt.Scan(&amp;name)            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1072 开学寄语</title>
    <link href="/2021/02/21/PAT/1072%20%E5%BC%80%E5%AD%A6%E5%AF%84%E8%AF%AD/"/>
    <url>/2021/02/21/PAT/1072%20%E5%BC%80%E5%AD%A6%E5%AF%84%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="开学寄语"><a href="#开学寄语" class="headerlink" title="开学寄语"></a><font size=6px>开学寄语</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！</p><p><img src="https://images.ptausercontent.com/3b1d9f4a-778b-4942-a9e2-836262f363aa.JPG" alt="jiyu.JPG"></p><p>本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出两个正整数 N（≤ 1000）和 M（≤ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 ≤ K ≤ 10）、以及 K 个物品的编号。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：</p><pre><code class="hljs angelscript">姓名缩写: 物品编号<span class="hljs-number">1</span> 物品编号<span class="hljs-number">2</span> ……</code></pre><p>最后一行输出存在问题的学生的总人数和被查缴物品的总数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">4 22333 6666CYLL 3 1234 2345 3456U 4 9966 6666 8888 6666GG 2 2333 7777JJ 3 0012 6666 2333</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">U: 6666 6666GG: 2333JJ: 6666 23333 5</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>第一次提交被最后两个测试点卡住，仔细看了下题目这个数字前面是有0的，所以要用string去接受和输出，问题解决，用暴力解最容易，判断每一个学生的物品编号是不是违禁物品就行</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> c,stuNum,forbidNum,countStuNum,countTotalNum,flag <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> s,a,b <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> forbid []<span class="hljs-keyword">string</span>    fmt.Scan(&amp;stuNum,&amp;forbidNum)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;forbidNum;i++&#123;        fmt.Scan(&amp;a)        forbid =<span class="hljs-built_in">append</span>(forbid,a)    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;stuNum;i++&#123;        fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s)        fmt.Scan(&amp;c)        <span class="hljs-comment">//检测学生的物品是否是违禁物品</span>        <span class="hljs-keyword">for</span> j:=<span class="hljs-number">0</span>;j&lt;c;j++&#123;            fmt.Scan(&amp;b)            <span class="hljs-keyword">for</span> _,v := <span class="hljs-keyword">range</span> forbid&#123;                <span class="hljs-keyword">if</span> v==b&#123;                    <span class="hljs-keyword">if</span> flag==<span class="hljs-number">0</span>&#123;                        flag=<span class="hljs-number">1</span>                        fmt.Printf(<span class="hljs-string">&quot;%s:&quot;</span>,s)                        countStuNum++                    &#125;                    fmt.Printf(<span class="hljs-string">&quot; %s&quot;</span>,b)                    countTotalNum++                &#125;            &#125;        &#125;        <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>&#123;            flag=<span class="hljs-number">0</span>            fmt.Printf(<span class="hljs-string">&quot;\n&quot;</span>)        &#125;    &#125;    fmt.Printf(<span class="hljs-string">&quot;%d %d\n&quot;</span>,countStuNum,countTotalNum)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1050 螺旋矩阵</title>
    <link href="/2021/02/20/PAT/1050%20%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%20/"/>
    <url>/2021/02/20/PAT/1050%20%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%20/</url>
    
    <content type="html"><![CDATA[<h3 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a><font size=6px>螺旋矩阵</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>本题要求将给定的 <em>N</em> 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 <em>m</em> 行 <em>n</em> 列，满足条件：<em>m</em>×<em>n</em> 等于 <em>N</em>；<em>m</em>≥<em>n</em>；且 <em>m</em>−<em>n</em> 取所有可能值中的最小值。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行中给出一个正整数 <em>N</em>，第 2 行给出 <em>N</em> 个待填充的正整数。所有数字不超过 104，相邻数字以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出螺旋矩阵。每行 <em>n</em> 个数字，共 <em>m</em> 行。相邻数字以 1 个空格分隔，行末不得有多余空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">1237 76 20 98 76 42 53 95 60 81 58 93</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">98 95 9342 37 8153 20 7658 60 76</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>最后一直有个最后的测试点是<strong>非零返回</strong>，最后查资料大神说最后一个测试点的数据是9773，真狠，最后结果是9773行1列，非零返回是因为flag数组开小了。</p><p><img src="/img/PAT1050.png"></p><p>level是外层循环，计算公式是m/2+m%2，再加上四层内层循环，数字一定要是右-下-左-上的顺序。</p><p>学习了新东西：</p><pre><code class="hljs gradle"><span class="hljs-keyword">sort</span>.<span class="hljs-keyword">Sort</span>(<span class="hljs-keyword">sort</span>.<span class="hljs-keyword">Reverse</span>(<span class="hljs-keyword">sort</span>.IntSlice(num)))</code></pre><p>将一个数字切片逆序排序</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>    <span class="hljs-string">&quot;sort&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> nu, a,m,n,count,level <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> num []<span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> flag [<span class="hljs-number">10000</span>][<span class="hljs-number">200</span>]<span class="hljs-keyword">int</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;nu)    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; nu; i++ &#123;        fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)        num = <span class="hljs-built_in">append</span>(num, a)    &#125;    sort.Sort(sort.Reverse(sort.IntSlice(num)))    <span class="hljs-comment">//求m和n，确定长和宽,m是几行，n是几列</span>    <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">int</span>(math.Sqrt(<span class="hljs-keyword">float64</span>(nu))); i &gt;=<span class="hljs-number">1</span>; i-- &#123;            <span class="hljs-keyword">if</span> nu % i == <span class="hljs-number">0</span> &#123;                n = i                m = nu / i                <span class="hljs-keyword">break</span>            &#125;        &#125;        <span class="hljs-comment">//fmt.Println(m,n)</span>   level = m/<span class="hljs-number">2</span> +m % <span class="hljs-number">2</span>   <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;level;i++&#123;       <span class="hljs-comment">//第一行</span>       <span class="hljs-keyword">for</span> j:=i;j&lt;n-i&amp;&amp;count&lt;nu;j++&#123;           flag[i][j] = num[count]           count++       &#125;       <span class="hljs-comment">//最后一列</span>       <span class="hljs-keyword">for</span> j:=i+<span class="hljs-number">1</span>;j&lt;m-i<span class="hljs-number">-1</span>&amp;&amp;count&lt;nu;j++&#123;           flag[j][n<span class="hljs-number">-1</span>-i] = num[count]           count++       &#125;       <span class="hljs-comment">//最后一行</span>       <span class="hljs-keyword">for</span> j:=n-i<span class="hljs-number">-1</span>;j&gt;=i&amp;&amp;count&lt;nu;j--&#123;           flag[m-i<span class="hljs-number">-1</span>][j] = num[count]           count++       &#125;       <span class="hljs-comment">//第一列</span>       <span class="hljs-keyword">for</span> j:=m-i<span class="hljs-number">-2</span>;j&gt;i&amp;&amp;count&lt;nu;j--&#123;           flag[j][i] = num[count]           count++       &#125;   &#125;   <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;m;i++&#123;       <span class="hljs-keyword">for</span> j:=<span class="hljs-number">0</span>;j&lt;n;j++&#123;           fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>,flag[i][j])           <span class="hljs-keyword">if</span> j!=n<span class="hljs-number">-1</span>&#123;               fmt.Printf(<span class="hljs-string">&quot; &quot;</span>)           &#125;<span class="hljs-keyword">else</span> &#123;               fmt.Printf(<span class="hljs-string">&quot;\n&quot;</span>)           &#125;       &#125;   &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1070 结绳</title>
    <link href="/2021/02/18/PAT/1070%20%E7%BB%93%E7%BB%B3/"/>
    <url>/2021/02/18/PAT/1070%20%E7%BB%93%E7%BB%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="结绳"><a href="#结绳" class="headerlink" title=" 结绳"></a><font size=6px> 结绳</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。</p><p><img src="https://images.ptausercontent.com/46293e57-aa0e-414b-b5c3-7c4b2d5201e2.jpg" alt="rope.jpg"></p><p>给定 <em>N</em> 段绳子的长度，你需要找出它们能串成的绳子的最大长度。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 <em>N</em> (2≤<em>N</em>≤104)；第 2 行给出 <em>N</em> 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过104。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">810 15 12 3 4 13 1 15</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">14</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>题目理解了代码很简单，先说思路，第二次折的时候会把第一次折的再折一次，所以要从最小的开始选，要小的多折几次，所以排序过后选最小的和第二小的开始折就行</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>   <span class="hljs-string">&quot;sort&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> a,result <span class="hljs-keyword">float64</span>    fmt.Scan(&amp;n)    num:= <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">float64</span>,n)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        fmt.Scanf(<span class="hljs-string">&quot;%f&quot;</span>,&amp;a)        num[i] = a    &#125;    sort.Float64s(num)    result =num[<span class="hljs-number">0</span>]    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;n;i++&#123;        result = (result+num[i])/<span class="hljs-number">2</span>    &#125;    fmt.Println(<span class="hljs-keyword">int</span>(result))&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1088 三人行</title>
    <link href="/2021/02/17/PAT/1088%20%E4%B8%89%E4%BA%BA%E8%A1%8C/"/>
    <url>/2021/02/17/PAT/1088%20%E4%B8%89%E4%BA%BA%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="三人行"><a href="#三人行" class="headerlink" title="三人行"></a><font size=6px>三人行</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”</p><p>本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 <code>Cong</code>；平等则输出 <code>Ping</code>；比你弱则输出 <code>Gai</code>。其间以 1 个空格分隔，行首尾不得有多余空格。</p><p>注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 <code>No Solution</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="hljs in">48 3 7</code></pre><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="hljs out">48 Ping Cong Gai</code></pre><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="hljs in">48 11 6</code></pre><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="hljs out">No Solution</code></pre><h4 id="思路-题目简单好理解，有两个易错点讲一下，第一个是丙是甲和乙能力的绝对插值，丙应该是个float64类型的数字，不是int类型的。"><a href="#思路-题目简单好理解，有两个易错点讲一下，第一个是丙是甲和乙能力的绝对插值，丙应该是个float64类型的数字，不是int类型的。" class="headerlink" title="思路:题目简单好理解，有两个易错点讲一下，第一个是丙是甲和乙能力的绝对插值，丙应该是个float64类型的数字，不是int类型的。"></a>思路:题目简单好理解，有两个易错点讲一下，第一个是丙是甲和乙能力的绝对插值，丙应该是个float64类型的数字，不是int类型的。</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> a,b,c,x,y,flag <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> z <span class="hljs-keyword">float64</span>    fmt.Scanf(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">99</span>;i&gt;=<span class="hljs-number">10</span>;i--&#123;        x=i        y=(i/<span class="hljs-number">10</span>)+(i % <span class="hljs-number">10</span>)*<span class="hljs-number">10</span>        z = math.Abs(<span class="hljs-keyword">float64</span>(x-y)) / <span class="hljs-keyword">float64</span>(b)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">float64</span>(c) * z==<span class="hljs-keyword">float64</span>(y)&#123;                fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>,x)                compare(<span class="hljs-keyword">float64</span>(a),<span class="hljs-keyword">float64</span>(x))                compare(<span class="hljs-keyword">float64</span>(a),<span class="hljs-keyword">float64</span>(y))                compare(<span class="hljs-keyword">float64</span>(a),z)                flag=<span class="hljs-number">1</span>                <span class="hljs-keyword">break</span>            &#125;    &#125;    <span class="hljs-keyword">if</span> flag==<span class="hljs-number">0</span>&#123;        fmt.Println(<span class="hljs-string">&quot;No Solution&quot;</span>)    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compare</span><span class="hljs-params">(a,b <span class="hljs-keyword">float64</span>)</span></span>  &#123;    <span class="hljs-keyword">if</span> a&gt;b&#123;        fmt.Printf(<span class="hljs-string">&quot; Gai&quot;</span>)    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a==b&#123;        fmt.Printf(<span class="hljs-string">&quot; Ping&quot;</span>)    &#125;<span class="hljs-keyword">else</span>&#123;        fmt.Printf(<span class="hljs-string">&quot; Cong&quot;</span>)    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1087 有多少不同的值</title>
    <link href="/2021/02/15/PAT/1087%20%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%8D%E5%90%8C%E7%9A%84%E5%80%BC/"/>
    <url>/2021/02/15/PAT/1087%20%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%8D%E5%90%8C%E7%9A%84%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="有多少不同的值"><a href="#有多少不同的值" class="headerlink" title="有多少不同的值"></a><font size=6px>有多少不同的值</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>1087 有多少不同的值 (20 分)</p><p>当自然数 <em>n</em> 依次取 1、2、3、……、<em>N</em> 时，算式 ⌊<em>n</em>/2⌋+⌊<em>n</em>/3⌋+⌊<em>n</em>/5⌋ 有多少个不同的值？（注：⌊<em>x</em>⌋ 为取整函数，表示不超过 <em>x</em> 的最大自然数，即 <em>x</em> 的整数部分。）</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入给出一个正整数 <em>N</em>（2≤<em>N</em>≤104）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出题面中算式取到的不同值的个数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">2017</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">1480</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>无</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> a,b <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> hash [<span class="hljs-number">25000</span>]<span class="hljs-keyword">int</span>    fmt.Scan(&amp;a)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;=a;i++&#123;        hash[i/<span class="hljs-number">2</span>+i/<span class="hljs-number">3</span>+i/<span class="hljs-number">5</span>]++    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">25000</span>;i++&#123;        <span class="hljs-keyword">if</span> hash[i]&gt;=<span class="hljs-number">1</span>&#123;            b++        &#125;    &#125;    fmt.Println(b)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1091 N-自守数</title>
    <link href="/2021/02/14/PAT/1091%20N-%E8%87%AA%E5%AE%88%E6%95%B0/"/>
    <url>/2021/02/14/PAT/1091%20N-%E8%87%AA%E5%AE%88%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="N-自守数"><a href="#N-自守数" class="headerlink" title="N-自守数"></a><font size=6px>N-自守数</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>如果某个数 <em>K</em> 的平方乘以 <em>N</em> 以后，结果的末尾几位数等于 <em>K</em>，那么就称这个数为“<em>N</em>-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。</p><p>本题就请你编写程序判断一个给定的数字是否关于某个 <em>N</em> 是 <em>N</em>-自守数。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行中给出正整数 <em>M</em>（≤20），随后一行给出 <em>M</em> 个待检测的、不超过 1000 的正整数。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个需要检测的数字，如果它是 <em>N</em>-自守数就在一行中输出最小的 <em>N</em> 和 <em>N**K</em>2 的值，以一个空格隔开；否则输出 <code>No</code>。注意题目保证 <em>N</em>&lt;10。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">392 5 233</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">3 253921 25No</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>把n从1到9遍历，如果哪个N的后几位等于自守数，就输出，简单题</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>    <span class="hljs-string">&quot;strconv&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    <span class="hljs-keyword">var</span> n,a,flag <span class="hljs-keyword">int</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)        <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++&#123;            len_a := getlen(a)            <span class="hljs-keyword">if</span> a*a*i % <span class="hljs-keyword">int</span>(math.Pow(<span class="hljs-number">10</span>,<span class="hljs-keyword">float64</span>(len_a)))==a&#123;                fmt.Printf(<span class="hljs-string">&quot;%d %d\n&quot;</span>,i,a*a*i)                flag = <span class="hljs-number">1</span>                <span class="hljs-keyword">break</span>            &#125;        &#125;        <span class="hljs-keyword">if</span> flag ==<span class="hljs-number">1</span>&#123;            flag=<span class="hljs-number">0</span>        &#125;<span class="hljs-keyword">else</span>&#123;            fmt.Println(<span class="hljs-string">&quot;No&quot;</span>)        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getlen</span><span class="hljs-params">(n <span class="hljs-keyword">int</span> )</span><span class="hljs-title">int</span></span>&#123;    <span class="hljs-keyword">return</span>  <span class="hljs-built_in">len</span>(strconv.Itoa(n))&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>过年小惊喜</title>
    <link href="/2021/02/13/%E8%BF%87%E5%B9%B4%E5%B0%8F%E6%83%8A%E5%96%9C/"/>
    <url>/2021/02/13/%E8%BF%87%E5%B9%B4%E5%B0%8F%E6%83%8A%E5%96%9C/</url>
    
    <content type="html"><![CDATA[<p><img src="%5Bhttp://hkctfsys.com/%E7%BA%A2%E5%8C%85%E5%9B%BE.png%5D(http://hkctfsys.com/%E7%BA%A2%E5%8C%85%E5%9B%BE.png)" alt="被富婆包养"></p>]]></content>
    
    
    <categories>
      
      <category>生活杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1093 字符串A+B</title>
    <link href="/2021/02/11/PAT/1093%E5%AD%97%E7%AC%A6%E4%B8%B2A+B/"/>
    <url>/2021/02/11/PAT/1093%E5%AD%97%E7%AC%A6%E4%B8%B2A+B/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串A-B"><a href="#字符串A-B" class="headerlink" title="字符串A+B"></a><font size=6px>字符串A+B</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定两个字符串 <em>A</em> 和 <em>B</em>，本题要求你输出 <em>A</em>+<em>B</em>，即两个字符串的并集。要求先输出 <em>A</em>，再输出 <em>B</em>，但<strong>重复的字符必须被剔除</strong>。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在两行中分别给出 <em>A</em> 和 <em>B</em>，均为长度不超过 106的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出题面要求的 <em>A</em> 和 <em>B</em> 的和。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">This is a sample testto show you_How it works</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">This ampletowyu_Hrk</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>这题不能用fmt.Scanf或者fmt.Scan来输入，因为这两个是用空格或者换行符间隔的，得用bufio来做输入，bufio输入的时候会把字符串最后一个‘\n’也输入，记得去掉即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;bufio&quot;</span>    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;os&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> s1,s2,s <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> mp=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">uint8</span>]<span class="hljs-keyword">int</span>,<span class="hljs-number">129</span>)    read:= bufio.NewReader(os.Stdin)    s1,_ = read.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)    s2,_ = read.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s1)<span class="hljs-number">-1</span>;i++&#123;        mp[s1[i]]=<span class="hljs-number">1</span>    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s2)<span class="hljs-number">-1</span>;i++&#123;        mp[s2[i]]=<span class="hljs-number">1</span>    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s1);i++&#123;        <span class="hljs-keyword">if</span> mp[s1[i]]==<span class="hljs-number">1</span>&#123;            s=s+<span class="hljs-keyword">string</span>(s1[i])            mp[s1[i]]=<span class="hljs-number">0</span>        &#125;    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s2);i++&#123;        <span class="hljs-keyword">if</span> mp[s2[i]]==<span class="hljs-number">1</span>&#123;            s=s+<span class="hljs-keyword">string</span>(s2[i])            mp[s2[i]]=<span class="hljs-number">0</span>        &#125;    &#125;    fmt.Println(s)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大二上半学期学期总结</title>
    <link href="/2021/02/09/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E5%8D%8A%E5%AD%A6%E6%9C%9F%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <url>/2021/02/09/%E5%A4%A7%E4%BA%8C%E4%B8%8A%E5%8D%8A%E5%AD%A6%E6%9C%9F%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​    </p><p>​    很快半年就过去了，都懒得写半年总结，每天都在催自己写，每天都说明天一定写，真的人人都笑贝塔，人人都是贝塔，贝塔最经典的语录就是，在寝室晚上的时候“明天一定学习，阿健明天带我去图书馆学习”，然后在寝室玩了一天电脑，其实我也差不多，寒假在家当个废物，不想写算法题不想起床，在家写了一会就不想写了，就叫女朋友打游戏去了。最近有点丧，想个办法改变一下，越玩愧疚感越大。</p><p>​    总的来说，大二上这半年是失败的，考试考试没考好，方法没用对，平时也不怎么努力学，平时都在写acm布置的作业（ps：这作业每周要花好久写），因为想早点去公司实习，要早点开始准备企业的面试，就好好写这个作业，然后其他作业很多都是很草率，什么工程经济学项目管理课都是乱来的，想不去就不去，因为每天差不多一点睡，早上8点起，感觉有报复性迟到的心理，只要是早八课就必迟到。</p><p>​    先说说班级的事情吧，大二转专业来到一个新班级，真就个个是学霸，确实班级里面就有很多大佬，跟他们相处之后发现大一一年一点计算机没学确实落后很多，会比你更早进入实验室、老师的项目、新苗之类的，哦对了，还是选择当班长，班长很水，事情没多少，听着还威风呢，然后还有李子睿同学全程安排了一次班会，班级水果捞，水果吃的很开心，还有班级小游戏玩的很开心。</p><p>​    再说说学业上面做了什么，参加了数学建模认证杯，成功拿了一个参赛奖，还干了啥，上课睡觉，早课迟到，这学期过的很水，感觉有些课真的不太听得懂，比如数据结构，都是好多都是课后自学的。哦对，还有创新实践，我承认这个创新实践是乱选的（听学长推荐的），选了嵌入式，不过老师真的很不错，很和善，教的还好，她带的研究生教的也好，很热心回答问题，我导师她还帮我找了服务外包大赛的队员，谢谢张桦老师。</p><pre><code> 说说我学到了什么，这个确实还是挺多的，加入了杭电助手的后台部，跟着社团接触到了golang语言和它的gorm和gin框架，最近就用goalng写力扣，上acm课系统的学了一遍算法，上数据结构课基础的数据结构都能掌握，上创新实践也了解了一点硬件的知识，硬件和电脑用串口和wifi的两种通信方式，还有学了sql serve，了解了关系型数据库基本的构建过程，就是先画er图之后在建表这些，我还用hexo弄了个静态的博客，现在我打算把它部署到服务器上面，每天更换一张好看的图片到首页，让他变成动态。</code></pre><p>​    说说爱情方面，想想我们这半年都去过什么地方，去过杭州动物园，去良渚看风景，和一起做了一顿饺子（皮厚馅少，面包蟹好吃），一起做了一度饭（好家伙忘记买米了，还没了一把雨伞和忘记拿充电头），一起吃了炸鸡，自助烤肉，牛排，奶酸菜鱼，肯德基，吴山烤禽，一起去点了痣。。。。。</p><p>​    总的来说，是失败的，失败中藏着胜利，这个寒假要做的事情还是很多的，准备浙大的pat考试乙级，学习js，在寒假也开始做服务外包大赛的前期准备，还问了学长接下来go改怎么做，他教我让我自己包装一个阿里dns接口，然后把我的博客用nginx弄成动态再acme部署https证书，还是有很多事情做（自己还这么懒，打自己两巴掌）想好了之后大方向是想做后端/算法岗位，不过阿里和字节都举办了前端练习生活动，大公司前端岗位缺失，也会考虑一下前端吧，再说。</p>]]></content>
    
    
    <categories>
      
      <category>生活杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1013 数素数</title>
    <link href="/2021/02/09/PAT/1013%20%E6%95%B0%E7%B4%A0%E6%95%B0%20/"/>
    <url>/2021/02/09/PAT/1013%20%E6%95%B0%E7%B4%A0%E6%95%B0%20/</url>
    
    <content type="html"><![CDATA[<h3 id="数素数"><a href="#数素数" class="headerlink" title="数素数"></a><font size=6px>数素数</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>令 <em>P**i</em> 表示第 <em>i</em> 个素数。现任给两个正整数 <em>M</em>≤<em>N</em>≤104，请输出 <em>P**M</em> 到 <em>P**N</em> 的所有素数。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 <em>M</em> 和 <em>N</em>，其间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>P**M</em> 到 <em>P**N</em> 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">5 27</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">11 13 17 19 23 29 31 37 41 4347 53 59 61 67 71 73 79 83 8997 101 103</code></pre><h4 id="思路-先预处理求出前10000个素数，然后再输出想要的素数"><a href="#思路-先预处理求出前10000个素数，然后再输出想要的素数" class="headerlink" title="思路:先预处理求出前10000个素数，然后再输出想要的素数"></a>思路:先预处理求出前10000个素数，然后再输出想要的素数</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,i,a,b,k <span class="hljs-keyword">int</span>    k=<span class="hljs-number">0</span>    <span class="hljs-keyword">var</span> primenumber []<span class="hljs-keyword">int</span>    i=<span class="hljs-number">2</span>    <span class="hljs-comment">//求前10000个素数</span>    <span class="hljs-keyword">for</span> n&lt;<span class="hljs-number">10000</span>&#123;        <span class="hljs-keyword">if</span> prime(i)==<span class="hljs-literal">true</span>&#123;            primenumber=<span class="hljs-built_in">append</span>(primenumber,i)            n++        &#125;        i++    &#125;    fmt.Scanf(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b)    <span class="hljs-keyword">for</span> i=a;i&lt;=b;i++&#123;        k++        <span class="hljs-keyword">if</span> i==b&#123;            fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>,primenumber[i<span class="hljs-number">-1</span>])        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">//为了满足十个数字换行</span>            <span class="hljs-keyword">if</span> k==<span class="hljs-number">10</span>&#123;                fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>,primenumber[i<span class="hljs-number">-1</span>])                k=<span class="hljs-number">0</span>            &#125;<span class="hljs-keyword">else</span>&#123;                fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>,primenumber[i<span class="hljs-number">-1</span>])            &#125;        &#125;    &#125;&#125;<span class="hljs-comment">//判断素数</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">prime</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span>  <span class="hljs-title">bool</span></span>&#123;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-keyword">int</span>(math.Sqrt(<span class="hljs-keyword">float64</span>(n)));i++&#123;        <span class="hljs-keyword">if</span> n% i==<span class="hljs-number">0</span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1011 A+B 和 C</title>
    <link href="/2021/02/09/PAT/1011%20A+B%E5%92%8CC/"/>
    <url>/2021/02/09/PAT/1011%20A+B%E5%92%8CC/</url>
    
    <content type="html"><![CDATA[<h3 id="A-B-和-C"><a href="#A-B-和-C" class="headerlink" title="A+B 和 C"></a><font size=6px>A+B 和 C</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定区间 [−231,231] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">41 2 32 3 42147483647 0 21474836460 -2147483648 -2147483647</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">Case #1: falseCase #2: trueCase #3: trueCase #4: false</code></pre><h4 id="思路-无"><a href="#思路-无" class="headerlink" title="思路:无"></a>思路:无</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,i <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> a,b,c <span class="hljs-keyword">int64</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    <span class="hljs-keyword">for</span> i&lt;n&#123;        fmt.Scanf(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c)        fmt.Printf(<span class="hljs-string">&quot;Case #%d: &quot;</span>,i+<span class="hljs-number">1</span>)        <span class="hljs-comment">//fmt.Println(&quot;%d  %d&quot;,a+b,c)</span>        <span class="hljs-keyword">if</span> a+b&gt;c&#123;            fmt.Printf(<span class="hljs-string">&quot;true&quot;</span>)        &#125;<span class="hljs-keyword">else</span>&#123;            fmt.Printf(<span class="hljs-string">&quot;false&quot;</span>)        &#125;        fmt.Printf(<span class="hljs-string">&quot;\n&quot;</span>)        i++    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1009 说反话</title>
    <link href="/2021/02/09/PAT/1009%20%E8%AF%B4%E5%8F%8D%E8%AF%9D/"/>
    <url>/2021/02/09/PAT/1009%20%E8%AF%B4%E5%8F%8D%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="说反话"><a href="#说反话" class="headerlink" title="说反话"></a><font size=6px>说反话</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">Hello World Here I Come</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">Come I Here World Hello</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>go语言思路就是先接受一个个单词放到shting切片里面，然后从后往前print</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> s []<span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> s1 <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> err error    <span class="hljs-keyword">var</span> k <span class="hljs-keyword">int</span>    <span class="hljs-keyword">for</span> &#123;        _,err=fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s1)        <span class="hljs-keyword">if</span> err==<span class="hljs-literal">nil</span>&#123;            s=<span class="hljs-built_in">append</span>(s,s1)            k++        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">break</span>        &#125;    &#125;    fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>,s[k<span class="hljs-number">-1</span>])    <span class="hljs-keyword">for</span> i:=k<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--&#123;        fmt.Printf(<span class="hljs-string">&quot; %s&quot;</span>,s[i])    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1007 素数对猜想</title>
    <link href="/2021/02/08/PAT/1007%20%E7%B4%A0%E6%95%B0%E5%AF%B9%E7%8C%9C%E6%83%B3/"/>
    <url>/2021/02/08/PAT/1007%20%E7%B4%A0%E6%95%B0%E5%AF%B9%E7%8C%9C%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="1007-素数对猜想"><a href="#1007-素数对猜想" class="headerlink" title="1007 素数对猜想"></a><font size=6px><strong>1007 素数对猜想</strong></font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>让我们定义<em>d**n</em>为：<em>d**n</em>=<em>p**n</em>+1−<em>p**n</em>，其中<em>p**i</em>是第<em>i</em>个素数。显然有<em>d</em>1=1，且对于<em>n</em>&gt;1有<em>d**n</em>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数<code>N</code>(&lt;105)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出正整数<code>N</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><pre><code class="hljs in">20</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><pre><code class="hljs out">4</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>先把素数求出来放一个切片里面，然后让每个相邻的切片相减看看是不是等于2</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,sum,num <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> p []<span class="hljs-keyword">int</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    <span class="hljs-keyword">if</span> n&lt;=<span class="hljs-number">3</span>&#123;        fmt.Println(<span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span>    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">2</span>;i&lt;=n;i++&#123;        <span class="hljs-keyword">if</span> prime(i)==<span class="hljs-literal">true</span>&#123;            p=<span class="hljs-built_in">append</span>(p,i)            num++        &#125;    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;num<span class="hljs-number">-1</span>;i++&#123;        <span class="hljs-keyword">if</span> p[i+<span class="hljs-number">1</span>]-p[i]==<span class="hljs-number">2</span>&#123;            sum++        &#125;    &#125;    fmt.Println(sum)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">prime</span><span class="hljs-params">(n <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span>&#123;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-keyword">int</span>(math.Sqrt(<span class="hljs-keyword">float64</span>(n)));i++&#123;        <span class="hljs-keyword">if</span> n%i==<span class="hljs-number">0</span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>        &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1005 继续3n+1猜想</title>
    <link href="/2021/02/08/PAT/1005%20%E7%BB%A7%E7%BB%AD3n+1%E7%8C%9C%E6%83%B3%20/"/>
    <url>/2021/02/08/PAT/1005%20%E7%BB%A7%E7%BB%AD3n+1%E7%8C%9C%E6%83%B3%20/</url>
    
    <content type="html"><![CDATA[<h3 id="继续3n-1猜想"><a href="#继续3n-1猜想" class="headerlink" title="继续3n+1猜想 "></a><font size=6px>继续3n+1猜想 </font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">63 5 6 7 8 11</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">7 6</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>输出的时候一个变量名字打错竟然卡了我1个钟头？</p><p>题目理解就是在给出的k个正整数里面找到不是卡拉兹猜想的中间数，</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,i ,a <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> array [<span class="hljs-number">101</span>]<span class="hljs-keyword">int</span>    mp:=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>,<span class="hljs-number">101</span>)    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    <span class="hljs-keyword">for</span> i&lt;n&#123;        fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)        array[i]=a        <span class="hljs-comment">//mp[]=101代表没有被覆盖</span>        mp[a]=<span class="hljs-number">101</span>        i++    &#125;    <span class="hljs-comment">//把每个数字能覆盖的都覆盖了</span>    <span class="hljs-keyword">for</span> i=<span class="hljs-number">0</span>;i&lt;n;i++&#123;        flag:=array[i]        <span class="hljs-keyword">for</span> array[i]!=<span class="hljs-number">1</span>&#123;            <span class="hljs-keyword">if</span> array[i]%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>&#123;                array[i]=(array[i]*<span class="hljs-number">3</span>+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>            &#125;<span class="hljs-keyword">else</span>&#123;                array[i]/=<span class="hljs-number">2</span>            &#125;            mp[array[i]]=flag        &#125;    &#125;    <span class="hljs-comment">//下面是为了使最后一个没有空格</span>    <span class="hljs-keyword">var</span> j <span class="hljs-keyword">int</span>    <span class="hljs-keyword">for</span> j=<span class="hljs-number">100</span>;j&gt;<span class="hljs-number">0</span>;j--&#123;        <span class="hljs-keyword">if</span> mp[j]==<span class="hljs-number">101</span>&#123;            fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>,j)            <span class="hljs-keyword">break</span>        &#125;    &#125;    <span class="hljs-keyword">for</span> k:=j<span class="hljs-number">-1</span>;k&gt;<span class="hljs-number">0</span>;k--&#123;        <span class="hljs-keyword">if</span> mp[k]==<span class="hljs-number">101</span>&#123;            fmt.Printf(<span class="hljs-string">&quot; %d&quot;</span>,k)        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1006 换个格式输出整数</title>
    <link href="/2021/02/08/PAT/1006%20%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0/"/>
    <url>/2021/02/08/PAT/1006%20%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1006-换个格式输出整数"><a href="#1006-换个格式输出整数" class="headerlink" title="1006 换个格式输出整数"></a><font size=6px><strong>1006 换个格式输出整数</strong></font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>让我们用字母 <code>B</code> 来表示“百”、字母 <code>S</code> 表示“十”，用 <code>12...n</code> 来表示不为零的个位数字 <code>n</code>（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，给出正整数 <em>n</em>（&lt;1000）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，用规定的格式输出 <em>n</em>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><pre><code class="hljs in">234</code></pre><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><pre><code class="hljs out">BBSSS1234</code></pre><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><pre><code class="hljs in">23</code></pre><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><pre><code class="hljs out">SS123</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>把每个数的百位十位个位求出来就可以</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n,a,b,c <span class="hljs-keyword">int</span><span class="hljs-comment">//a代表百位，b代表十位，c代表各位</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    a=n/<span class="hljs-number">100</span>    b=n/<span class="hljs-number">10</span> %<span class="hljs-number">10</span>    c=n%<span class="hljs-number">10</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;a;i++&#123;        fmt.Printf(<span class="hljs-string">&quot;B&quot;</span>)    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;b;i++&#123;        fmt.Printf(<span class="hljs-string">&quot;S&quot;</span>)    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;c;i++&#123;        fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>,i+<span class="hljs-number">1</span>)    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1004 成绩排名</title>
    <link href="/2021/02/07/PAT/1004%20%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D/"/>
    <url>/2021/02/07/PAT/1004%20%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="成绩排名"><a href="#成绩排名" class="headerlink" title="成绩排名"></a><font size=6px>成绩排名</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><pre><code class="hljs angelscript">第 <span class="hljs-number">1</span> 行：正整数 n第 <span class="hljs-number">2</span> 行：第 <span class="hljs-number">1</span> 个学生的姓名 学号 成绩第 <span class="hljs-number">3</span> 行：第 <span class="hljs-number">2</span> 个学生的姓名 学号 成绩  ... ... ...第 n+<span class="hljs-number">1</span> 行：第 n 个学生的姓名 学号 成绩</code></pre><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">3Joe Math990112 89Mike CS991301 100Mary EE990830 95</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">Mike CS991301Joe Math990112</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>挺简单的题目，用map来写，注意map要写101个大小，因为有0分和100分，如果n==1时要输入两遍一样的。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> s1 ,s2,s <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> score,n,i <span class="hljs-keyword">int</span>    mp:=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>,<span class="hljs-number">101</span>)    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    <span class="hljs-keyword">if</span> n&lt;=<span class="hljs-number">1</span>&#123;        fmt.Scanf(<span class="hljs-string">&quot;%s%s%d&quot;</span>,&amp;s1,&amp;s2,&amp;score)        fmt.Println(s1+<span class="hljs-string">&quot; &quot;</span>+s2)        fmt.Println(s1+<span class="hljs-string">&quot; &quot;</span>+s2)    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">for</span> i&lt;n&#123;            fmt.Scanf(<span class="hljs-string">&quot;%s%s%d&quot;</span>,&amp;s1,&amp;s2,&amp;score)            s=s1+<span class="hljs-string">&quot; &quot;</span>+s2            mp[score]=s            i++        &#125;        <span class="hljs-keyword">for</span> j:=<span class="hljs-number">100</span>;j&gt;=<span class="hljs-number">0</span>;j--&#123;            <span class="hljs-keyword">if</span> mp[j]!=<span class="hljs-string">&quot;&quot;</span>&#123;                fmt.Println(mp[j])                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">for</span> j:=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">100</span>;j++&#123;            <span class="hljs-keyword">if</span> mp[j]!=<span class="hljs-string">&quot;&quot;</span>&#123;                fmt.Println(mp[j])                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1003 我要通过</title>
    <link href="/2021/02/07/PAT/1003%20%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87/"/>
    <url>/2021/02/07/PAT/1003%20%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="我要通过"><a href="#我要通过" class="headerlink" title="我要通过"></a><font size=6px>我要通过</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">8PATPAATAAPATAAAAPAATAAAAxPATxPTWhateverAPAAATAA</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">YESYESYESYESNONONONO</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>先读懂题目，只能有P A T三个字母，其他字母不行</p><p><strong>3、如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</strong>最重要是第三个条件，设P前面的A的数量为counta，P和T中间A的数量为countb，T之后的A的数量为countc，找规律就可以知道countc=counta*countb，这个规律知道之后就好写了</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> n , i ,j , counta ,countb,countc,flag <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)    <span class="hljs-keyword">for</span> i&lt;n&#123;                fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s)        <span class="hljs-comment">//判断有无其他字符</span>        <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;<span class="hljs-built_in">len</span>(s);k++&#123;            <span class="hljs-keyword">if</span> s[k]!=<span class="hljs-string">&#x27;P&#x27;</span>&amp;&amp;s[k]!=<span class="hljs-string">&#x27;T&#x27;</span>&amp;&amp;s[k]!=<span class="hljs-string">&#x27;A&#x27;</span>&#123;                i++                flag=<span class="hljs-number">1</span>                <span class="hljs-keyword">break</span>            &#125;        &#125;        <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>&#123;            flag=<span class="hljs-number">0</span>            fmt.Printf(<span class="hljs-string">&quot;NO\n&quot;</span>)            <span class="hljs-keyword">continue</span>        &#125;        <span class="hljs-keyword">for</span> j&lt;<span class="hljs-built_in">len</span>(s)&amp;&amp;s[j]!=<span class="hljs-string">&#x27;P&#x27;</span>&#123;            counta++            j++        &#125;        j++        <span class="hljs-keyword">for</span> j&lt;<span class="hljs-built_in">len</span>(s)&amp;&amp;s[j]!=<span class="hljs-string">&#x27;T&#x27;</span>&#123;            countb++            j++        &#125;        countc=<span class="hljs-built_in">len</span>(s)-countb-counta<span class="hljs-number">-2</span>        <span class="hljs-comment">//println(counta ,countb ,countc)</span>        <span class="hljs-keyword">if</span> countb==<span class="hljs-number">0</span>||counta*countb!=countc&#123;            fmt.Printf(<span class="hljs-string">&quot;NO\n&quot;</span>)        &#125;<span class="hljs-keyword">else</span> &#123;            fmt.Printf(<span class="hljs-string">&quot;YES\n&quot;</span>)        &#125;        <span class="hljs-comment">//清零</span>        countc=<span class="hljs-number">0</span>        counta=<span class="hljs-number">0</span>        countb=<span class="hljs-number">0</span>        j=<span class="hljs-number">0</span>        i++    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1002 写出这个数</title>
    <link href="/2021/02/05/PAT/1002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/"/>
    <url>/2021/02/05/PAT/1002%20%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="写出这个数"><a href="#写出这个数" class="headerlink" title="写出这个数"></a><font size=6px>写出这个数</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">1234567890987654321123456789</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">yi san wu</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>思路还是很简单的，用string接受，然后一位位加起来成sum，最后把sum转化成切片，再转化成中文输出（这一步用map会更好）写’jiu‘的时候写成了’qiu‘，卡了我半天，我是憨批，而且写的很冗长，比较烂</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;fmt&quot;</span>    <span class="hljs-string">&quot;math&quot;</span>    <span class="hljs-string">&quot;strconv&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;    <span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int</span>    fmt.Scanf(<span class="hljs-string">&quot;%s&quot;</span>,&amp;s)    <span class="hljs-comment">//转化成合数</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(s);i++&#123;        sum=sum+<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)    &#125;    sumLen:=<span class="hljs-built_in">len</span>(strconv.Itoa(sum))    sumSlice:=<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,sumLen)    <span class="hljs-comment">//转换成切片</span>    <span class="hljs-keyword">for</span> i:=sumLen;i&gt;<span class="hljs-number">0</span>;i--&#123;        sumSlice[sumLen-i]=sum / <span class="hljs-keyword">int</span>(math.Pow(<span class="hljs-number">10</span>,<span class="hljs-keyword">float64</span> (i)<span class="hljs-number">-1</span>)) %<span class="hljs-number">10</span>    &#125;    <span class="hljs-comment">//fmt.Println(sumSlice)</span>    <span class="hljs-keyword">switch</span> (sumSlice[<span class="hljs-number">0</span>]) &#123;    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: fmt.Print(<span class="hljs-string">&quot;ling&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: fmt.Print(<span class="hljs-string">&quot;yi&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: fmt.Print(<span class="hljs-string">&quot;er&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: fmt.Print(<span class="hljs-string">&quot;san&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: fmt.Print(<span class="hljs-string">&quot;si&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: fmt.Print(<span class="hljs-string">&quot;wu&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: fmt.Print(<span class="hljs-string">&quot;liu&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: fmt.Print(<span class="hljs-string">&quot;qi&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: fmt.Print(<span class="hljs-string">&quot;ba&quot;</span>)        <span class="hljs-keyword">break</span>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: fmt.Print(<span class="hljs-string">&quot;jiu&quot;</span>)        <span class="hljs-keyword">break</span>    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;sumLen;i++&#123;        <span class="hljs-keyword">switch</span> (sumSlice[i]) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: fmt.Print(<span class="hljs-string">&quot; ling&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: fmt.Print(<span class="hljs-string">&quot; yi&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: fmt.Print(<span class="hljs-string">&quot; er&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: fmt.Print(<span class="hljs-string">&quot; san&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: fmt.Print(<span class="hljs-string">&quot; si&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: fmt.Print(<span class="hljs-string">&quot; wu&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: fmt.Print(<span class="hljs-string">&quot; liu&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: fmt.Print(<span class="hljs-string">&quot; qi&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>: fmt.Print(<span class="hljs-string">&quot; ba&quot;</span>)            <span class="hljs-keyword">break</span>        <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: fmt.Print(<span class="hljs-string">&quot; jiu&quot;</span>)            <span class="hljs-keyword">break</span>        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1001 害死人不偿命的3n+1猜想</title>
    <link href="/2021/02/05/PAT/1001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%843n+1%E7%8C%9C%E6%83%B3%20/"/>
    <url>/2021/02/05/PAT/1001%20%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%843n+1%E7%8C%9C%E6%83%B3%20/</url>
    
    <content type="html"><![CDATA[<h3 id="害死人不偿命的3n-1猜想"><a href="#害死人不偿命的3n-1猜想" class="headerlink" title="害死人不偿命的3n+1猜想 "></a><font size=6px>害死人不偿命的3n+1猜想 </font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><pre><code class="hljs in">3</code></pre><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><pre><code class="hljs out">5</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>无，看代码</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">var</span> a,k <span class="hljs-keyword">int</span>    fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a)    <span class="hljs-keyword">for</span> a!=<span class="hljs-number">1</span>&#123;        <span class="hljs-keyword">if</span> a%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>&#123;            a=a/<span class="hljs-number">2</span>        &#125;<span class="hljs-keyword">else</span>&#123;            a=(<span class="hljs-number">3</span>*a+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>        &#125;        k++    &#125;    fmt.Println(k)&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>PAT刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣九十三：复原IP地址</title>
    <link href="/2021/02/02/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E4%B9%9D%E5%8D%81%E4%B8%89%EF%BC%9A%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/"/>
    <url>/2021/02/02/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E4%B9%9D%E5%8D%81%E4%B8%89%EF%BC%9A%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="复原IP地址"><a href="#复原IP地址" class="headerlink" title="复原IP地址"></a><font size=6px>复原IP地址</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。</p><p>有效的 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。</p><p>例如：”0.1.2.201” 和 “192.168.1.1” 是 有效的 IP 地址，但是 “0.011.255.245”、”192.168.1.312” 和 “<a href="mailto:&#49;&#57;&#x32;&#x2e;&#49;&#54;&#56;&#x40;&#x31;&#x2e;&#x31;">&#49;&#57;&#x32;&#x2e;&#49;&#54;&#56;&#x40;&#x31;&#x2e;&#x31;</a>“ 是 无效的 IP 地址。</p><p>示例 1：</p><p>输入：s = “25525511135”<br>输出：[“255.255.11.135”,”255.255.111.35”]<br>示例 2：</p><p>输入：s = “0000”<br>输出：[“0.0.0.0”]<br>示例 3：</p><p>输入：s = “1111”<br>输出：[“1.1.1.1”]<br>示例 4：</p><p>输入：s = “010010”<br>输出：[“0.10.0.10”,”0.100.1.0”]<br>示例 5：</p><p>输入：s = “101023”<br>输出：[“1.0.10.23”,”1.0.102.3”,”10.1.0.23”,”10.10.2.3”,”101.0.2.3”]</p><p>提示：</p><p>0 &lt;= s.length &lt;= 3000<br>s 仅由数字组成</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h5 id="学到的东西"><a href="#学到的东西" class="headerlink" title="学到的东西"></a>学到的东西</h5><p>1、搞清楚了切片和数组的区别，切片要导入的话得用append，没有大小限制</p><p>2、s[i]-‘0’出来的结果是byte类型的</p><p>3、要重置一个字符串型的变量，var一个新的string变量，然后要它等于新的string变量</p><p>4、要返回一个空的字符串切片，return []string{}</p><p>5、要用len求数字的长度，要用strconv.Itoa把数字转化成字符串才能求</p><p>思路：</p><p>第一步先求长度符不符合标准，第二步求有无非法字符，第三步开始正式处理，这道题好像是一串数字，在里面加上3个点，然后判断被三个点隔开的4个数字符不符合标准，把4个数字取出来，然后分别判断是否小于255，然后判断这4个数字的长度和s的长度一不一样，如果不一样说明数字前面有0，就不符合条件</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs golang"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;strconv&quot;</span><span class="hljs-keyword">var</span> s_len <span class="hljs-keyword">int</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">restoreIpAddresses</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">string</span></span> &#123;    <span class="hljs-keyword">var</span> s1 ,s3 <span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> s2 []<span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> n1,n2,n3,n4,sum_len <span class="hljs-keyword">int</span>    s_len=<span class="hljs-built_in">len</span>(s)    <span class="hljs-comment">//如果长度不达标</span>    <span class="hljs-keyword">if</span> s_len&lt;<span class="hljs-number">4</span> || s_len&gt;<span class="hljs-number">12</span>&#123;        <span class="hljs-keyword">return</span> []<span class="hljs-keyword">string</span>&#123;&#125;    &#125;    <span class="hljs-comment">//如果出现非法字符</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;s_len;i++&#123;        <span class="hljs-keyword">if</span> s[i]&lt;<span class="hljs-string">&#x27;0&#x27;</span> || s[i]&gt;<span class="hljs-string">&#x27;9&#x27;</span>&#123;            <span class="hljs-keyword">return</span> []<span class="hljs-keyword">string</span>&#123;&#125;        &#125;    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;s_len<span class="hljs-number">-3</span>&amp;&amp;i&lt;=<span class="hljs-number">2</span>;i++&#123;        <span class="hljs-keyword">for</span> j:=i+<span class="hljs-number">1</span>;j&lt;s_len<span class="hljs-number">-2</span>&amp;&amp;j-i&lt;=<span class="hljs-number">3</span>;j++&#123;            <span class="hljs-keyword">for</span> k:=j+<span class="hljs-number">1</span>;k&lt;s_len<span class="hljs-number">-1</span>&amp;&amp;k-j&lt;=<span class="hljs-number">3</span>;k++&#123;                n1,n2,n3,n4,sum_len=stio(s,i,j,k)                <span class="hljs-keyword">if</span> n1&lt;=<span class="hljs-number">255</span>&amp;&amp;n2&lt;=<span class="hljs-number">255</span>&amp;&amp;n3&lt;=<span class="hljs-number">255</span>&amp;&amp;n4&lt;=<span class="hljs-number">255</span>&amp;&amp;sum_len==s_len&#123;                    <span class="hljs-keyword">for</span> m:=<span class="hljs-number">0</span>;m&lt;s_len;m++&#123;                        s1=s1+<span class="hljs-keyword">string</span>(s[m])                        <span class="hljs-keyword">if</span> m==i||m==j||m==k&#123;                            s1=s1+<span class="hljs-string">&quot;.&quot;</span>                        &#125;                    &#125;                    s2=<span class="hljs-built_in">append</span>(s2,s1)                    <span class="hljs-comment">//重置s1</span>                    s1=s3                &#125;                n1,n2,n3=<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> s2&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stio</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>,a <span class="hljs-keyword">int</span>,b <span class="hljs-keyword">int</span> ,c <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span> &#123;    <span class="hljs-keyword">var</span> n1,n2,n3,n4 <span class="hljs-keyword">int</span>    <span class="hljs-keyword">var</span> sum_len <span class="hljs-keyword">int</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;=a;i++&#123;        n1=n1*<span class="hljs-number">10</span>+<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)    &#125;    <span class="hljs-keyword">for</span> i:=a+<span class="hljs-number">1</span>;i&lt;=b;i++&#123;        n2=n2*<span class="hljs-number">10</span>+<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)    &#125;    <span class="hljs-keyword">for</span> i:=b+<span class="hljs-number">1</span>;i&lt;=c;i++&#123;        n3=n3*<span class="hljs-number">10</span>+<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)    &#125;    <span class="hljs-keyword">for</span> i:=c+<span class="hljs-number">1</span>;i&lt;s_len;i++&#123;        n4=n4*<span class="hljs-number">10</span>+<span class="hljs-keyword">int</span>(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)    &#125;        sum_len=<span class="hljs-built_in">len</span>(strconv.Itoa(n1))+<span class="hljs-built_in">len</span>(strconv.Itoa(n2))+<span class="hljs-built_in">len</span>(strconv.Itoa(n3))+<span class="hljs-built_in">len</span>(strconv.Itoa(n4))    <span class="hljs-keyword">return</span> n1,n2,n3,n4,sum_len&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户<br>   内存消耗：2.1 MB, 在所有 Go 提交中击败了56.25%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣二十：有效的括号</title>
    <link href="/2021/01/30/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E4%BA%8C%E5%8D%81%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <url>/2021/01/30/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E4%BA%8C%E5%8D%81%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="力扣二十：有效的括号"><a href="#力扣二十：有效的括号" class="headerlink" title="力扣二十：有效的括号"></a><font size=6px>力扣二十：有效的括号</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><p>示例 1：</p><p>输入：s = “()”<br>输出：true<br>示例 2：</p><p>输入：s = “()[]{}”<br>输出：true<br>示例 3：</p><p>输入：s = “(]”<br>输出：false<br>示例 4：</p><p>输入：s = “([)]”<br>输出：false<br>示例 5：</p><p>输入：s = “{[]}”<br>输出：true</p><p>提示：</p><p>1 &lt;= s.length &lt;= 104<br>s 仅由括号 ‘()[]{}’ 组成</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h5 id="知道的golang语言知识"><a href="#知道的golang语言知识" class="headerlink" title="知道的golang语言知识"></a>知道的golang语言知识</h5><p>1、知道了golang里面没有数组里面++，–的情况，得写出来，比如是s[i++]不可以，i++可以</p><p>2、’a’在golang里面代表的是int类型，就是字母转ascii码之后的数字，string类型的s，s[0]就是int类型的数字，是rune类型。</p><p>讲一下思路把，简单的数组栈，碰到左边的括号就++，碰到右边的括号就判断–后的数组里面的字母是不是他的左括号，代码里面有三种特殊情况要考虑一些</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">bool</span></span> &#123;    <span class="hljs-keyword">var</span> str [<span class="hljs-number">5000</span>]<span class="hljs-keyword">string</span>    <span class="hljs-keyword">var</span> k <span class="hljs-keyword">int</span>    s_len:=<span class="hljs-built_in">len</span>(s)    <span class="hljs-comment">//情况1：如果括号个数不等于2的倍数或者为0 就说明是false</span>    <span class="hljs-keyword">if</span> s_len%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>||s_len==<span class="hljs-number">0</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    &#125;    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;s_len;i++&#123;        <span class="hljs-keyword">if</span> s[i]==<span class="hljs-string">&#x27;(&#x27;</span>||s[i]==<span class="hljs-string">&#x27;[&#x27;</span>||s[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>&#123;            str[k]=<span class="hljs-keyword">string</span>(s[i])            k++        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">//情况2：如果第一个就是‘）’，‘]’，‘&#125;’就说明的false</span>            <span class="hljs-keyword">if</span> k==<span class="hljs-number">0</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>            &#125;            <span class="hljs-keyword">switch</span> s[i]&#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:                    k--                    <span class="hljs-keyword">if</span> str[k]!=<span class="hljs-string">&quot;(&quot;</span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>                    &#125;                    <span class="hljs-keyword">break</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:                    k--                    <span class="hljs-keyword">if</span> str[k]!=<span class="hljs-string">&quot;[&quot;</span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>                    &#125;                    <span class="hljs-keyword">break</span>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:                    k--                    <span class="hljs-keyword">if</span> str[k]!=<span class="hljs-string">&quot;&#123;&quot;</span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>                    &#125;                    <span class="hljs-keyword">break</span>            &#125;        &#125;    &#125;    <span class="hljs-comment">//情况3：如果没有做到一一对应k会大于0 就false</span>    <span class="hljs-keyword">if</span> k&gt;<span class="hljs-number">0</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    &#125;     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户<br>   内存消耗：2.1 MB, 在所有 Go 提交中击败了23.58%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电话号码的字母组合</title>
    <link href="/2021/01/29/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%B8%83%EF%BC%9A%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <url>/2021/01/29/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%B8%83%EF%BC%9A%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="电话号码的字母组合"><a href="#电话号码的字母组合" class="headerlink" title="电话号码的字母组合"></a><font size=6px>电话号码的字母组合</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png"></p><p>示例 1：</p><p>输入：digits = “23”<br>输出：[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]<br>示例 2：</p><p>输入：digits = “”<br>输出：[]<br>示例 3：</p><p>输入：digits = “2”<br>输出：[“a”,”b”,”c”]</p><p>提示：</p><p>0 &lt;= digits.length &lt;= 4<br>digits[i] 是范围 [‘2’, ‘9’] 的一个数字。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h5 id="map的初体验和使用"><a href="#map的初体验和使用" class="headerlink" title="map的初体验和使用"></a>map的初体验和使用</h5><p>还不知道golang里面的map是什么怎么用，上网搜了一下map是哈希表差不读的，有键值对，直接mp：=map[string]string出来的是一个空的没开辟地址的map，要mp：=make（map[string]string）才是开辟好地址的，在下面代码使用的结束时候别忘记加逗号</p><p>一道典型的dfs搜索算法，先把一个个字母放进path里面，等i&gt;=len(digits)后就append到结果里面<br>还学会了自定义函数里面再自定义函数的用法。dfs看着很简洁，递归代码还是不好理解</p><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">letterCombinations</span><span class="hljs-params">(digits <span class="hljs-keyword">string</span>)</span> []<span class="hljs-title">string</span></span> &#123;    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(digits)==<span class="hljs-number">0</span>&#123;        <span class="hljs-keyword">return</span> []<span class="hljs-keyword">string</span>&#123;&#125;    &#125;    mp:=<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;    <span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,    <span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;def&quot;</span>,    <span class="hljs-string">&quot;4&quot;</span>:<span class="hljs-string">&quot;ghi&quot;</span>,    <span class="hljs-string">&quot;5&quot;</span>:<span class="hljs-string">&quot;jkl&quot;</span>,    <span class="hljs-string">&quot;6&quot;</span>:<span class="hljs-string">&quot;mno&quot;</span>,    <span class="hljs-string">&quot;7&quot;</span>:<span class="hljs-string">&quot;pqrs&quot;</span>,    <span class="hljs-string">&quot;8&quot;</span>:<span class="hljs-string">&quot;tuv&quot;</span>,    <span class="hljs-string">&quot;9&quot;</span>:<span class="hljs-string">&quot;wxyz&quot;</span>,    &#125;    <span class="hljs-keyword">var</span> dfs <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">string</span>)</span></span>    <span class="hljs-keyword">var</span> ans []<span class="hljs-keyword">string</span>    dfs=<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>,path <span class="hljs-keyword">string</span>)</span></span>&#123;        <span class="hljs-keyword">if</span> i&gt;=<span class="hljs-built_in">len</span>(digits)&#123;            ans=<span class="hljs-built_in">append</span>(ans,path)            <span class="hljs-keyword">return</span>        &#125;        <span class="hljs-keyword">for</span> _,v:=<span class="hljs-keyword">range</span> mp[<span class="hljs-keyword">string</span>(digits[i])]&#123;            <span class="hljs-comment">//第一次写的时候把path+string(v)写在了dfs上一行，结果会不对，回溯的时候回溯会不对</span>            dfs(i+<span class="hljs-number">1</span>,path+<span class="hljs-keyword">string</span>(v))        &#125;    &#125;    <span class="hljs-comment">//这里是dfs进入的入口</span>    dfs(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">return</span> ans&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户<br>   内存消耗：2 MB, 在所有 Go 提交中击败了93.14%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣模板</title>
    <link href="/2021/01/28/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%B8%89%EF%BC%9A%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2021/01/28/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%B8%89%EF%BC%9A%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="题目-罗马数字转整数"><a href="#题目-罗马数字转整数" class="headerlink" title="题目:罗马数字转整数"></a><font size=6px>题目:罗马数字转整数</font></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>​    一个难点如果小的数字出现在大的数字前面的时候，这个数字变成减而不是加上这个数字的大小，用switch写比较清楚。其他比较简单易理解。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;    sum:=<span class="hljs-number">0</span>    len_s:=<span class="hljs-built_in">len</span>(s)    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;len_s;i++&#123;        <span class="hljs-keyword">switch</span> s[i]&#123;           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;I&#x27;</span>:                 sum++                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;len_s&#123;                    <span class="hljs-keyword">if</span> s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;V&#x27;</span>|| s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;X&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;L&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;L&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;C&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;D&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>&#123;                        sum=sum<span class="hljs-number">-2</span>                    &#125;                &#125;                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;V&#x27;</span>:                sum+=<span class="hljs-number">5</span>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;len_s&#123;                    <span class="hljs-keyword">if</span> s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;V&#x27;</span>|| s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;X&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;L&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;C&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;D&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>&#123;                        sum=sum<span class="hljs-number">-2</span>                    &#125;                &#125;                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>:                sum+=<span class="hljs-number">10</span>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;len_s&#123;                    <span class="hljs-keyword">if</span> s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;L&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;C&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;D&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>&#123;                        sum=sum<span class="hljs-number">-20</span>                    &#125;                &#125;                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>:                sum+=<span class="hljs-number">50</span>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;len_s&#123;                    <span class="hljs-keyword">if</span> s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;C&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;D&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>&#123;                        sum=sum<span class="hljs-number">-100</span>                    &#125;                &#125;                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:                sum+=<span class="hljs-number">100</span>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;len_s&#123;                    <span class="hljs-keyword">if</span> s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;D&#x27;</span>||s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>&#123;                        sum=sum<span class="hljs-number">-200</span>                    &#125;                &#125;                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:                sum+=<span class="hljs-number">500</span>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;len_s&#123;                    <span class="hljs-keyword">if</span> s[i+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>&#123;                        sum=sum<span class="hljs-number">-1000</span>                    &#125;                &#125;                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>:                sum+=<span class="hljs-number">1000</span>                <span class="hljs-keyword">break</span>         &#125;    &#125;    <span class="hljs-keyword">return</span> sum&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：12 ms, 在所有 Go 提交中击败了47.27%的用户<br>   内存消耗：3.1 MB, 在所有 Go 提交中击败了99.24%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣三：无重复字字符的最长字串</title>
    <link href="/2021/01/27/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E4%B8%89%EF%BC%9A%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/"/>
    <url>/2021/01/27/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E4%B8%89%EF%BC%9A%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p><font size=6px>题目:无重复字字符的最长字串</font></p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: s = “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: s = “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。<br>示例 4:</p><p>输入: s = “”<br>输出: 0</p><p>提示：</p><p>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>用滑动窗口法，设置一个数组，初始为0，再初设一个left和right，如果一个字母没有用过就把它</p><p>*<em>```**</em>freq[s[right+1]-‘a’]++*</p><p>，并且往右边划，如果在往右边划的时候遇到一个用到过的字母，就left++，把left上面的字母的频率减1，</p><p>```freq[s[left]-‘a’]–</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="hljs golang"><span class="hljs-comment">//用滑动窗口法</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">int</span></span> &#123;  left,right,max:=<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>  <span class="hljs-keyword">var</span> freq[<span class="hljs-number">256</span>] <span class="hljs-keyword">int</span>  <span class="hljs-keyword">for</span> left&lt;<span class="hljs-built_in">len</span>(s)&#123;​    <span class="hljs-comment">//go语言很严格，单个字符不能用“a”</span>​    <span class="hljs-keyword">if</span> right+<span class="hljs-number">1</span>&lt;<span class="hljs-built_in">len</span>(s)&amp;&amp;freq[s[right+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]==<span class="hljs-number">0</span>&#123;​      freq[s[right+<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]++​      right++​    &#125;<span class="hljs-keyword">else</span>&#123;​      freq[s[left]-<span class="hljs-string">&#x27;a&#x27;</span>]--​      left++​    &#125;​    <span class="hljs-keyword">if</span> max&lt;right-left+<span class="hljs-number">1</span>&#123;​      max=right-left+<span class="hljs-number">1</span>​    &#125;  &#125;  <span class="hljs-keyword">return</span> max&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户<br>   内存消耗：2.5 MB, 在所有 Go 提交中击败了100.00%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣四十八：旋转图像</title>
    <link href="/2021/01/25/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%9B%9B%E5%8D%81%E5%85%AB%EF%BC%9A%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <url>/2021/01/25/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%9B%9B%E5%8D%81%E5%85%AB%EF%BC%9A%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<p><font size=6px>题目:旋转图像</font></p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵表示一个图像。</p><p>将图像顺时针旋转 90 度。</p><p><strong>说明：</strong></p><p>你必须在<strong>原地</strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p><p><strong>示例 1:</strong></p><pre><code class="hljs yaml"><span class="hljs-string">给定</span> <span class="hljs-string">matrix</span> <span class="hljs-string">=</span> [  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],  [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],  [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<span class="hljs-string">,</span><span class="hljs-string">原地旋转输入矩阵，使其变为:</span>[  [<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>],  [<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>],  [<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>]]</code></pre><p><strong>示例 2:</strong></p><pre><code class="hljs yaml"><span class="hljs-string">给定</span> <span class="hljs-string">matrix</span> <span class="hljs-string">=</span>[  [ <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>,<span class="hljs-number">11</span>],  [ <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>,<span class="hljs-number">10</span>],  [<span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],  [<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">16</span>]]<span class="hljs-string">,</span> <span class="hljs-string">原地旋转输入矩阵，使其变为:</span>[  [<span class="hljs-number">15</span>,<span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>],  [<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>],  [<span class="hljs-number">12</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],  [<span class="hljs-number">16</span>, <span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]]</code></pre><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这题想清楚了不难，找找规律，就是<strong>矩阵转置</strong>再<strong>镜像翻转</strong>一下就得到结果</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rotate</span><span class="hljs-params">(matrix [][]<span class="hljs-keyword">int</span>)</span></span>  &#123;    swap:=<span class="hljs-number">0</span>    a:=<span class="hljs-built_in">len</span>(matrix)     b:=<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])    <span class="hljs-comment">//下面是矩阵转置部分</span>    <span class="hljs-keyword">for</span> k:=a<span class="hljs-number">-1</span>;k&gt;<span class="hljs-number">0</span>;k--&#123;        <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;k;i++&#123;            swap=matrix[a-k<span class="hljs-number">-1</span>][a-i<span class="hljs-number">-1</span>]            matrix[a-k<span class="hljs-number">-1</span>][a-i<span class="hljs-number">-1</span>]=matrix[a-i<span class="hljs-number">-1</span>][a-k<span class="hljs-number">-1</span>]            matrix[a-i<span class="hljs-number">-1</span>][a-k<span class="hljs-number">-1</span>]=swap        &#125;    &#125;    <span class="hljs-comment">//下面是矩阵镜像翻转部分</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;a;i++&#123;        <span class="hljs-keyword">for</span> j:=<span class="hljs-number">1</span>;j&lt;=b/<span class="hljs-number">2</span>;j++&#123;            swap = matrix[i][j<span class="hljs-number">-1</span>]            matrix[i][j<span class="hljs-number">-1</span>] = matrix[i][b-j]            matrix[i][b-j] =swap        &#125;    &#125;&#125;</code></pre><p class="note note-primary"; style="font-size:22px">   执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户<br>   内存消耗：2.2 MB, 在所有 Go 提交中击败了100.00%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分模块刷力扣题</title>
    <link href="/2021/01/10/%E5%8A%9B%E6%89%A3/%E5%88%86%E6%A8%A1%E5%9D%97%E5%88%B7%E5%8A%9B%E6%89%A3%E9%A2%98/"/>
    <url>/2021/01/10/%E5%8A%9B%E6%89%A3/%E5%88%86%E6%A8%A1%E5%9D%97%E5%88%B7%E5%8A%9B%E6%89%A3%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><style>table th:first-of-type {    width: 20%;}table th:nth-of-type(2) {    width: 50%;}table th:nth-of-type(3) {    width: 20%;} table th:nth-of-type(4) {    width: 30%;}</style><div style="font-size:20px"><table><thead><tr><th align="center">题号</th><th align="center">题目</th><th align="center">语言</th><th align="center">难易程度</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">两数之和</td><td align="center">c</td><td align="center">Easy</td></tr><tr><td align="center">11</td><td align="center">乘最多的水</td><td align="center">go</td><td align="center">Medium</td></tr><tr><td align="center">15</td><td align="center">三数之和</td><td align="center">go</td><td align="center">Medium</td></tr><tr><td align="center">16</td><td align="center">最接近的三数之和</td><td align="center">go</td><td align="center">Medium</td></tr><tr><td align="center">41</td><td align="center">缺失一个正数</td><td align="center">go</td><td align="center">Hard</td></tr><tr><td align="center">42</td><td align="center">接雨水</td><td align="center">go</td><td align="center">Hard</td></tr><tr><td align="center">48</td><td align="center">旋转图像</td><td align="center">go</td><td align="center">Medium</td></tr></tbody></table></div><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><div style="font-size:20px"><table><thead><tr><th align="center">题号</th><th align="center">题目</th><th align="center">语言</th><th align="center">难易程度</th></tr></thead><tbody><tr><td align="center">3</td><td align="center">无重复字符的最长子串</td><td align="center">go</td><td align="center">Medium</td></tr><tr><td align="center">13</td><td align="center">罗马数字转整数</td><td align="center">go</td><td align="center">Easy</td></tr><tr><td align="center">17</td><td align="center"></td><td align="center">go</td><td align="center">Medium</td></tr><tr><td align="center">20</td><td align="center"></td><td align="center">go</td><td align="center">Easy</td></tr><tr><td align="center">22</td><td align="center"></td><td align="center">go</td><td align="center">Medium</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>力扣四十二：接雨水</title>
    <link href="/2021/01/09/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%9B%9B%E5%8D%81%E4%BA%8C%EF%BC%9A%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2021/01/09/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%9B%9B%E5%8D%81%E4%BA%8C%EF%BC%9A%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<p><font size=6px>题目:接雨水</font></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出：6<br>解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="示例1图片"></p><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：height = [4,2,0,3,2,5]<br>输出：9</p><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><li>n == height.length</li><li>0 <= n <= 3 * 104</li><li>0 <= height[i] <= 105</li><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p class="note note-primary">    单词注释：     height[left] left位置上的格子的数量    maxl 左边格子最大的格子</p><p>  这题比较难，用双指针方法代码比较简洁，用示例1举例子，先找height[left]与height[right]中小的数字，然后执行小数字方代码，如果height[left]比maxl还要大,就把maxl=height[left]，如果不是，那就说明这一格肯定可以装水（可以看代码的第一个注释的解释），把所有可以装水的格子的装水量加起来就是答案。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">trap</span><span class="hljs-params">(height []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;    left,right,maxl,maxr,res := <span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(height)<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> left&lt;=right&#123;         <span class="hljs-keyword">if</span> height[left]&lt;height[right]&#123;             <span class="hljs-keyword">if</span> maxl&lt;=height[left]&#123;                maxl=height[left]             &#125;<span class="hljs-keyword">else</span>&#123;                 <span class="hljs-comment">//左边肯定有比height[left]高的墙，右边有maxr＞maxl，右边肯定有比height[left]高的墙，水在这一格的高度就是maxl-height[left]，下面同理</span>                res = res+maxl-height[left]             &#125;             left++         &#125;<span class="hljs-keyword">else</span>&#123;             <span class="hljs-keyword">if</span> maxr&lt;height[right]&#123;                 maxr=height[right]             &#125;<span class="hljs-keyword">else</span>&#123;                 <span class="hljs-comment">//右边肯定有比height[right]高的墙</span>                res = res+maxr-height[right];             &#125;             right--         &#125;    &#125;    <span class="hljs-keyword">return</span> res&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：4 ms, 在所有 Go 提交中击败了74.89%的用户<br>   内存消耗：2.8 MB, 在所有 Go 提交中击败了81.87%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣-四十一：缺失一个正数</title>
    <link href="/2021/01/06/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3-%E5%9B%9B%E5%8D%81%E4%B8%80%EF%BC%9A%E7%BC%BA%E5%A4%B1%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"/>
    <url>/2021/01/06/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3-%E5%9B%9B%E5%8D%81%E4%B8%80%EF%BC%9A%E7%BC%BA%E5%A4%B1%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p> <font size=6px>题目:缺失一个正数</font></p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>​    给你一个未排序的整数数组，请你找出其中没有出现的最小的正整数。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h4><p>输入: [1,2,0]<br>输出: 3</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h4><p>输入: [3,4,-1,1]<br>输出: 2</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h4><p>输入: [7,8,9,11,12]<br>输出: 1</p><h4 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h4><p>你的算法的时间复杂度应为O(n)，并且只能使用常数级别的额外空间。</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>用map做，先把数放进map里面<code>map_num[v]=v</code>，再用哈希的思想，判断这个下标和值相不相同。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">firstMissingPositive</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;    map_num:=<span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">int</span>,<span class="hljs-built_in">len</span>(nums))    <span class="hljs-keyword">for</span> _,v :=<span class="hljs-keyword">range</span> nums&#123;        map_num[v]=v    &#125;    <span class="hljs-comment">//用map来判断这个值在不在确实很方便</span>    <span class="hljs-keyword">for</span> i:=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">len</span>(nums);i++&#123;        <span class="hljs-keyword">if</span> _,ok:=map_num[i];!ok&#123;            <span class="hljs-keyword">return</span> i        &#125;    &#125;    <span class="hljs-comment">//如果数字全部有序，就输出个数加一</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户<br>   内存消耗：2.4 MB, 在所有 Go 提交中击败了9.44%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣十六 最接近的三数之和</title>
    <link href="/2021/01/05/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E5%85%AD%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/01/05/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E5%85%AD%20%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">庆祝自己第一次达到百分之95以上<p>执行用时：4 ms, 在所有 Go 提交中击败了95.59%的用户</p><p>内存消耗：2.7 MB, 在所有 Go 提交中击败了98.89%的用户</p></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>输入：nums = [-1,2,1,-4], target = 1<br>输出：2<br>解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</p><p><strong>提示：</strong></p><ul><li><p>3 &lt;= nums.length &lt;= 10^3</p></li><li><p>-10^3 &lt;= nums[i] &lt;= 10^3</p></li><li><p>*-10^4 &lt;= target &lt;= 10^4 </p></li></ul><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>和第十五题类似，先排序，后用对撞指针对后面的数字进行扫描，只需注意一点<strong>return的是sum的值，min却是target-sum</strong></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">threeSumClosest</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>, target <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;    <span class="hljs-comment">//先排序</span>    min:=<span class="hljs-number">999999</span>    <span class="hljs-keyword">var</span> value <span class="hljs-keyword">int</span>    sort.Ints(nums)    length:=<span class="hljs-built_in">len</span>(nums)    <span class="hljs-comment">//确认好一个数之后用对撞指针</span>     <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;length<span class="hljs-number">-2</span>;k++&#123;        left:=k+<span class="hljs-number">1</span>        right:=length<span class="hljs-number">-1</span>        <span class="hljs-keyword">for</span> left&lt;right&#123;            sum := nums[left]+nums[right]+nums[k]            <span class="hljs-keyword">if</span>(sum==target)&#123;                <span class="hljs-keyword">return</span> sum            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&lt;target)&#123;                <span class="hljs-keyword">if</span>(target-sum&lt;min)&#123;                    min=target-sum                    value=sum  <span class="hljs-comment">//这里要注意，return的是sum的值，min却是target-sum</span>                &#125;                left++            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">if</span>(sum-target&lt;min)&#123;                    min=sum-target                    value=sum                &#125;                right--            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> value&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>力扣十五;三数之和</title>
    <link href="/2021/01/04/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%BA%94;%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2021/01/04/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%BA%94;%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="题目-三数之和"><a href="#题目-三数之和" class="headerlink" title="题目:三数之和"></a><font size=6px>题目:三数之和</font></h4><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>难度中等</p><p>给你一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b + c =</em> 0 ？请你找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例：</strong></p><pre><code class="hljs lsl">给定数组 nums = [<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-4</span>]，满足要求的三元组集合为：[  [<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],  [<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>]]</code></pre><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>​    先排序，再用for从0到length-2中选一个k值，选定k值之后把k后面的数用对撞指针从k+1到length-1用对撞指针求一个值等于-num[k]，记得判断left右边和right左边的值是否和自己相同</p><p><strong>一直出现这个错误，检查之后发现最后少个大括号</strong></p><p><code>Line 40: Char 6: syntax error: unexpected __helper__, expecting ( (solution.go)</code></p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">threeSum</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> [][]<span class="hljs-title">int</span></span> &#123;    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums)&lt;<span class="hljs-number">3</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>    &#125;    <span class="hljs-comment">//先排序</span>    sort.Ints(nums)    length:=<span class="hljs-built_in">len</span>(nums)    <span class="hljs-keyword">var</span> res [][]<span class="hljs-keyword">int</span>    <span class="hljs-comment">//确认好一个数之后用对撞指针</span>     <span class="hljs-keyword">for</span> k:=<span class="hljs-number">0</span>;k&lt;length<span class="hljs-number">-2</span>;k++&#123;        <span class="hljs-keyword">if</span> nums[k]&gt;<span class="hljs-number">0</span> &#123;            <span class="hljs-keyword">break</span>        &#125;        <span class="hljs-keyword">if</span> k&gt;<span class="hljs-number">0</span>&amp;&amp;nums[k]==nums[k<span class="hljs-number">-1</span>]&#123;            <span class="hljs-keyword">continue</span>        &#125;        left:=k+<span class="hljs-number">1</span>        right:=length<span class="hljs-number">-1</span>        <span class="hljs-keyword">for</span> left&lt;right&#123;            sum := nums[left]+nums[right]+nums[k]            <span class="hljs-comment">//要判断left和它右边的值一不一样，right的值和它左边的一不一样</span>            <span class="hljs-keyword">if</span> sum&gt;<span class="hljs-number">0</span>&#123;                <span class="hljs-keyword">for</span> right=right<span class="hljs-number">-1</span>;right&gt;left &amp;&amp;nums[right]==nums[right+<span class="hljs-number">1</span>];right-- &#123;&#125;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum&lt;<span class="hljs-number">0</span> &#123;                <span class="hljs-keyword">for</span> left=left+<span class="hljs-number">1</span>;right&gt;left &amp;&amp;nums[left]==nums[left<span class="hljs-number">-1</span>];left++ &#123;&#125;            &#125;<span class="hljs-keyword">else</span>&#123;                res = <span class="hljs-built_in">append</span>(res,[]<span class="hljs-keyword">int</span>&#123;nums[k],nums[left],nums[right]&#125;)                <span class="hljs-keyword">for</span> right=right<span class="hljs-number">-1</span>;right&gt;left &amp;&amp;nums[right]==nums[right+<span class="hljs-number">1</span>];right-- &#123;&#125;                <span class="hljs-keyword">for</span> left=left+<span class="hljs-number">1</span>;right&gt;left &amp;&amp;nums[left]==nums[left<span class="hljs-number">-1</span>];left++ &#123;&#125;                     &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> res&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：40 ms, 在所有 Go 提交中击败了52.12%的用户<br>   内存消耗：7.3 MB, 在所有 Go 提交中击败了42.04%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣十一;乘最多水的容器</title>
    <link href="/2020/12/30/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%B8%80;%E4%B9%98%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <url>/2020/12/30/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E5%8D%81%E4%B8%80;%E4%B9%98%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><font size=6px>题目:乘最多水的容器</font></p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器。</p><p>示例 1：</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg"></p><p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49<br>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。<br>示例 2：</p><p>输入：height = [1,1]<br>输出：1<br>示例 3：</p><p>输入：height = [4,3,2,1,4]<br>输出：16<br>示例 4：</p><p>输入：height = [1,2,1]<br>输出：2</p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>​            用到对撞指针的思路，指针开始指向开头和末尾，从开始和末尾分别判断， 如果  (height[end]&gt;height[first])，就first++。</p><h4 id="go代码"><a href="#go代码" class="headerlink" title="go代码"></a>go代码</h4><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(height []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;    max:=<span class="hljs-number">0</span>    end:=<span class="hljs-built_in">len</span>(height)<span class="hljs-number">-1</span>    first:=<span class="hljs-number">0</span>    <span class="hljs-keyword">var</span> ans <span class="hljs-keyword">int</span>    <span class="hljs-keyword">for</span> first&lt;end&#123;        width := end-first        <span class="hljs-keyword">if</span>(height[end]&gt;height[first])&#123;            ans=width*height[first]            first++        &#125;<span class="hljs-keyword">else</span>&#123;            ans=width*height[end]            end--        &#125;        <span class="hljs-keyword">if</span>(max&lt;ans)&#123;            max=ans        &#125;    &#125;   <span class="hljs-keyword">return</span> max &#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">   执行用时：20 ms, 在所有 Go 提交中击败了83.14%的用户<br>   内存消耗：6.3 MB, 在所有 Go 提交中击败了53.07%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>array</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makedown基础语法</title>
    <link href="/2020/12/03/makedown%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/12/03/makedown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="1、字体大小"><a href="#1、字体大小" class="headerlink" title="1、字体大小"></a>1、字体大小</h1><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><pre><code class="hljs clean"># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题</code></pre><h6 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h6><p><strong>加粗</strong></p><pre><code class="hljs *">**加粗**</code></pre><p><em>斜体</em></p><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体*</span></code></pre><p>输入代码</p><pre><code class="hljs autohotkey">直接输入”```“然后按下回车键（`在英文情况加按左上角波浪号可打出）</code></pre><p>3、url</p><p>图片导入</p><p>![](C:\Users\89500\Desktop\HTML\my storys\hexo\themes\fluid\source\img\avatar.png)</p><pre><code class="hljs markdown">绝对路径： ![<span class="hljs-string">这里输入图片名字</span>](<span class="hljs-link">这里输入绝对路径</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>makedown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>makedown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>情侣间的日常琐事记录</title>
    <link href="/2020/11/29/%E6%83%85%E4%BE%A3%E7%94%9C%E8%9C%9C%E5%B0%8F%E6%97%A5%E5%B8%B8/"/>
    <url>/2020/11/29/%E6%83%85%E4%BE%A3%E7%94%9C%E8%9C%9C%E5%B0%8F%E6%97%A5%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="情侣间的日常琐事记录"><a href="#情侣间的日常琐事记录" class="headerlink" title="情侣间的日常琐事记录"></a>情侣间的日常琐事记录</h1><p class="label label-warning"style= "font-size:24px" >记录了一部分成为情侣之后的日常，超甜勿看</p><hr><h3 id="2020-7-10第一次约会去撸猫"><a href="#2020-7-10第一次约会去撸猫" class="headerlink" title="2020.7.10第一次约会去撸猫"></a>2020.7.10第一次约会去撸猫</h3><h3 id="2020-7-12-yyj生日、第一次一起去逛西湖"><a href="#2020-7-12-yyj生日、第一次一起去逛西湖" class="headerlink" title="2020.7.12 yyj生日、第一次一起去逛西湖"></a>2020.7.12 yyj生日、第一次一起去逛西湖</h3><h3 id="2020-7-19-答辩结束-yyj到家啦-虽然结果不咋地-但是收获了一个npy-不错"><a href="#2020-7-19-答辩结束-yyj到家啦-虽然结果不咋地-但是收获了一个npy-不错" class="headerlink" title="2020.7.19 答辩结束:yyj到家啦,虽然结果不咋地,但是收获了一个npy,不错~"></a>2020.7.19 答辩结束:yyj到家啦,虽然结果不咋地,但是收获了一个npy,不错~</h3><h3 id="2020-8-第一次出去玩-乌镇旅游-一起看了一部恐怖片）"><a href="#2020-8-第一次出去玩-乌镇旅游-一起看了一部恐怖片）" class="headerlink" title="2020,8.第一次出去玩(乌镇旅游+一起看了一部恐怖片）"></a>2020,8.第一次出去玩(乌镇旅游+一起看了一部恐怖片）</h3><h3 id="2020-8-2第一出认真的舌吻哈哈"><a href="#2020-8-2第一出认真的舌吻哈哈" class="headerlink" title="2020.8.2第一出认真的舌吻哈哈"></a>2020.8.2第一出认真的舌吻哈哈</h3><h3 id="2020-8-25第一个情人节-看了第一场电影、收获第一支玫瑰🌹"><a href="#2020-8-25第一个情人节-看了第一场电影、收获第一支玫瑰🌹" class="headerlink" title="2020.8.25第一个情人节,看了第一场电影、收获第一支玫瑰🌹"></a>2020.8.25第一个情人节,看了第一场电影、收获第一支玫瑰🌹</h3><h3 id="2020-9-6他来抗州找我玩，第一出去逛了宜家"><a href="#2020-9-6他来抗州找我玩，第一出去逛了宜家" class="headerlink" title="2020.9.6他来抗州找我玩，第一出去逛了宜家"></a>2020.9.6他来抗州找我玩，第一出去逛了宜家</h3><h3 id="2020-10-2获得了秋天第一个柚子"><a href="#2020-10-2获得了秋天第一个柚子" class="headerlink" title="2020.10.2获得了秋天第一个柚子"></a>2020.10.2获得了秋天第一个柚子</h3><p><img src="http://qjzagkyy7.hn-bkt.clouddn.com/%E6%9F%9A%E5%AD%901.jpg" alt="柚子"></p><hr><h3 id="2020-11-13第一次在外面过夜，可惜没看到日出，但是一起包饺子了"><a href="#2020-11-13第一次在外面过夜，可惜没看到日出，但是一起包饺子了" class="headerlink" title="2020.11.13第一次在外面过夜，可惜没看到日出，但是一起包饺子了"></a>2020.11.13第一次在外面过夜，可惜没看到日出，但是一起包饺子了</h3>]]></content>
    
    
    <categories>
      
      <category>生活杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>情侣间的小问题</title>
    <link href="/2020/11/29/%E6%83%85%E4%BE%A3%E9%97%B4%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/"/>
    <url>/2020/11/29/%E6%83%85%E4%BE%A3%E9%97%B4%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="问题：粘在一起反而会玩玩不痛快，学的时候效率低学不进去。"><a href="#问题：粘在一起反而会玩玩不痛快，学的时候效率低学不进去。" class="headerlink" title="问题：粘在一起反而会玩玩不痛快，学的时候效率低学不进去。"></a>问题：粘在一起反而会玩玩不痛快，学的时候效率低学不进去。</h4><p>做作业学习都在图书馆，来易班默认就是玩的，默认把时间浪费掉。我们是情侣，不是商业合作伙伴，很多时候的付出其实也没那么计较实质性看得见的回报</p>]]></content>
    
    
    <categories>
      
      <category>生活杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣第一题：两数之和</title>
    <link href="/2020/11/26/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E7%AC%AC%E4%B8%80%E9%A2%98/"/>
    <url>/2020/11/26/%E5%8A%9B%E6%89%A3/%E5%8A%9B%E6%89%A3%E7%AC%AC%E4%B8%80%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>观前啰嗦：</strong>这是我第一次做力扣题目，本题用c语言做的，接下来打算用go语言写，来锻炼我go语言能力，无论用哪种语言其实都一样，语言是一种工具，思想才是最重要的。</p><h2>1、两数之和</h2><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p> <strong>示例</strong></p><pre><code class="hljs angelscript">给定 nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span>因为 nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> + <span class="hljs-number">7</span> = <span class="hljs-number">9</span>所以返回 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</code></pre><p>思想：这题思想不难理解，就是第一次错题有些细节要注意，target表示给的最终指，returnSize是个指针，表示最终的返回数个数。</p><p><strong>代码</strong></p><pre><code class="hljs c"><span class="hljs-comment">/*我用最传统的方法写的*/</span><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    *returnSize =<span class="hljs-number">2</span>;<span class="hljs-comment">//用来说明有几个返回大小</span>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> a[<span class="hljs-number">2</span>];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize<span class="hljs-number">-1</span>;i++)    &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;numsSize;j++)        &#123;            <span class="hljs-keyword">if</span>((nums[i]+nums[j])==target)            &#123;                a[<span class="hljs-number">0</span>]=i;                a[<span class="hljs-number">1</span>]=j;                <span class="hljs-keyword">return</span> a;            &#125;         &#125;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="代码效率："><a href="#代码效率：" class="headerlink" title="代码效率："></a>代码效率：</h4><p class="note note-primary"; style="font-size:22px">  执行用时：12 ms, 在所有 C 提交中击败了30.82%的用户<br>  内存消耗：6 MB, 在所有 C 提交中击败了50.75%的用户</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>array</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈git的使用</title>
    <link href="/2020/11/19/%E6%B5%85%E8%B0%88git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/19/%E6%B5%85%E8%B0%88git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="观前提醒：我写这个主要是来巩固我学的git操作"><a href="#观前提醒：我写这个主要是来巩固我学的git操作" class="headerlink" title="观前提醒：我写这个主要是来巩固我学的git操作"></a><p class="note note-primary">观前提醒：我写这个主要是来巩固我学的git操作</p></h2><p>在程序中#这个符号后面代表我的注释</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h4 id="0、先安装git，这里我引用别人的文章git安装"><a href="#0、先安装git，这里我引用别人的文章git安装" class="headerlink" title="0、先安装git，这里我引用别人的文章git安装"></a>0、先安装git，这里我引用别人的文章<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">git安装</a></h4><h4 id="1、创建一个文件夹，创建一个readme-txt文件，里面写入hello-git文字（这个之后会用到）"><a href="#1、创建一个文件夹，创建一个readme-txt文件，里面写入hello-git文字（这个之后会用到）" class="headerlink" title="1、创建一个文件夹，创建一个readme.txt文件，里面写入hello git文字（这个之后会用到）"></a>1、创建一个文件夹，创建一个readme.txt文件，里面写入hello git文字（这个之后会用到）</h4><h4 id="2、在文件夹中右键，会有一个Git-Bosh-Here，点这个"><a href="#2、在文件夹中右键，会有一个Git-Bosh-Here，点这个" class="headerlink" title="2、在文件夹中右键，会有一个Git Bosh Here，点这个"></a>2、在文件夹中右键，会有一个Git Bosh Here，点这个</h4><p><img src="/img/gitbosh.png"></p><h4 id="3、配置环境，输入提交人的名字和邮箱"><a href="#3、配置环境，输入提交人的名字和邮箱" class="headerlink" title="3、配置环境，输入提交人的名字和邮箱"></a>3、配置环境，输入提交人的名字和邮箱</h4><pre><code class="hljs routeros"><span class="hljs-variable">$git</span><span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&quot;输入你的名字&quot;</span><span class="hljs-variable">$git</span><span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&quot;输入你的邮箱&quot;</span><span class="hljs-variable">$git</span><span class="hljs-built_in"> config </span>--global -l  #查看仓库配置，用来查看你是否配置成功</code></pre><h4 id="4-建立仓库"><a href="#4-建立仓库" class="headerlink" title="4.建立仓库"></a>4.建立仓库</h4><pre><code class="hljs autoit">$git init     <span class="hljs-meta">#会给你创建一个.git隐藏文件，用来存放你的操作记录，注意在你的路径里面最好不要有中文</span></code></pre><h2 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h2><p>创建好文件夹和txt文件之后，在git里面输入</p><pre><code class="hljs autoit">$git status <span class="hljs-meta">#查看现在的仓库状态</span></code></pre><p>会出现这样的语句</p><pre><code class="hljs sql">Untracked files:  <span class="hljs-comment">#有个未被跟踪的readme.txt文件</span>  (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">include</span> <span class="hljs-keyword">in</span> what will be committed)        readme .txt<span class="hljs-keyword">no</span> changes added <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span> (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-string">&quot;git commit -a&quot;</span>)</code></pre><p>然后添加文件</p><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> readme.txt</span></code></pre><p>如果提交了没提示那就是提交正确了，输入了命令什么都没提示就是最好的提示。</p><p>最后提交文件</p><pre><code class="hljs pgsql">git <span class="hljs-keyword">commit</span> -m&quot;写你提交了什么东西，方便回溯的时候看回溯到哪个版本&quot;  #可以<span class="hljs-keyword">add</span>多个文件一起<span class="hljs-keyword">commit</span></code></pre><p>现在再输入git status会显示</p><pre><code class="hljs pgsql">$ git status<span class="hljs-keyword">On</span> branch dev<span class="hljs-keyword">nothing</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span>, working tree clean #没有东西可以提交</code></pre><p>用 git log命令能知道提交人的id和提交日期</p><pre><code class="hljs angelscript">$ git logcommit <span class="hljs-number">507671f</span>473bbbfa18ec0c2de9ed80c27cc483b53Author: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Fri Nov <span class="hljs-number">13</span> <span class="hljs-number">00</span>:<span class="hljs-number">10</span>:<span class="hljs-number">45</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>wrote a readme.file</code></pre><p>用 git show命令能知道最近一个人的提交id，id后面回溯的时候要用到</p><pre><code class="hljs angelscript">$ git showcommit <span class="hljs-number">20</span>b009be6781d2fe5df568f8bf859bdf7e489408 (HEAD -&gt; dev) #这一串字母就是                                                                    #commit idAuthor: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Thu Nov <span class="hljs-number">26</span> <span class="hljs-number">09</span>:<span class="hljs-number">44</span>:<span class="hljs-number">19</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>    write a readme.txt</code></pre><p>我们再在readme.txt文件中“hello git。”的基础上再添加“hello world”文字，并保存。</p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>  我们来讲git最有趣的回溯功能,先用git log功能看提交的记录和提交人的id,这里我提交了多次。</p><pre><code class="hljs angelscript">$ git logcommit <span class="hljs-number">80</span>ee417c0d4eb1803202b762dbabe747fa38d1f6 (HEAD -&gt; dev)Author: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Mon Nov <span class="hljs-number">30</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">22</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>    add hello worldcommit <span class="hljs-number">3</span>bb0b8bfb6f2f9178d31a4d0cb372b3d87b461aeAuthor: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Sun Nov <span class="hljs-number">29</span> <span class="hljs-number">09</span>:<span class="hljs-number">46</span>:<span class="hljs-number">26</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>    add hello worldcommit <span class="hljs-number">20</span>b009be6781d2fe5df568f8bf859bdf7e489408Author: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Thu Nov <span class="hljs-number">26</span> <span class="hljs-number">09</span>:<span class="hljs-number">44</span>:<span class="hljs-number">19</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>    write a readme.txtcommit <span class="hljs-number">268</span>d66e08b1ebf50d9ddbf20096504592463051dAuthor: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Thu Nov <span class="hljs-number">26</span> <span class="hljs-number">09</span>:<span class="hljs-number">34</span>:<span class="hljs-number">36</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>    write a readme.txt</code></pre><p>用git reset –hard “写提交的id”</p><pre><code class="hljs maxima">$ git <span class="hljs-built_in">reset</span> --hard <span class="hljs-number">20b009</span> #只要前几个字母id就可以匹配到你的提交idHEAD <span class="hljs-built_in">is</span> now <span class="hljs-built_in">at</span> 20b009b write a readme.txt</code></pre><p>这里说head指针已经指向20b009b,我们打开readme.txt，会发现写的“hello world”已经不见了。</p><p><strong>如果回退到以前的版本了还想回会到最新的版本，那咋办？</strong></p><p>找到之前git log的界面，就像我之前git log，那一条最新的日志记录</p><pre><code class="hljs angelscript">$ git logcommit <span class="hljs-number">80</span>ee417c0d4eb1803202b762dbabe747fa38d1f6 (HEAD -&gt; dev)Author: jess-weigou &lt;<span class="hljs-symbol">895006375@</span>qq.com&gt;Date:   Mon Nov <span class="hljs-number">30</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">22</span> <span class="hljs-number">2020</span> +<span class="hljs-number">0800</span>    add hello world</code></pre><p>输入 git reset –hard “80ee417”就可以回退到之前的最新版本</p><pre><code class="hljs sql">$ git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard 80ee417c0</span><span class="hljs-keyword">HEAD</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">now</span> <span class="hljs-keyword">at</span> <span class="hljs-number">80</span>ee417 <span class="hljs-keyword">add</span> hello world</code></pre><p>你会发现hello world又出现了，所以别轻易清屏，清屏了也没关系，用git reflog查看历史命令</p><pre><code class="hljs angelscript">$ git <span class="hljs-built_in">ref</span>log<span class="hljs-number">80</span>ee417 (HEAD -&gt; dev) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">0</span>&#125;: reset: moving to <span class="hljs-number">80</span>ee417c0<span class="hljs-number">20</span>b009b <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">1</span>&#125;: reset: moving to <span class="hljs-number">20</span>b009<span class="hljs-number">80</span>ee417 (HEAD -&gt; dev) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">2</span>&#125;: commit: add hello world<span class="hljs-number">3</span>bb0b8b <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">3</span>&#125;: commit: add hello world<span class="hljs-number">20</span>b009b <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">4</span>&#125;: commit: write a readme.txt<span class="hljs-number">268</span>d66e <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">5</span>&#125;: commit: write a readme.txte845d2b (github/master, master) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">6</span>&#125;: checkout: moving <span class="hljs-keyword">from</span> master to deve845d2b (github/master, master) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">7</span>&#125;: checkout: moving <span class="hljs-keyword">from</span> dev to mastere845d2b (github/master, master) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">8</span>&#125;: checkout: moving <span class="hljs-keyword">from</span> master to deve845d2b (github/master, master) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">9</span>&#125;: reset: moving to e845<span class="hljs-number">507671f</span> <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">10</span>&#125;: reset: moving to <span class="hljs-number">50767</span>e845d2b (github/master, master) <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">11</span>&#125;: commit: add some words<span class="hljs-number">507671f</span> <span class="hljs-symbol">HEAD@</span>&#123;<span class="hljs-number">12</span>&#125;: commit (initial): wrote a readme.file</code></pre>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>良渚游玩</title>
    <link href="/2020/11/13/%E8%89%AF%E6%B8%9A%E6%B8%B8%E7%8E%A9/"/>
    <url>/2020/11/13/%E8%89%AF%E6%B8%9A%E6%B8%B8%E7%8E%A9/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/avatar.png"></p><p>咕咕咕</p>]]></content>
    
    
    <categories>
      
      <category>生活杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大一生活的总结</title>
    <link href="/2020/10/28/%E5%A4%A7%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%94%9F%E6%B4%BB%E7%9A%84%E6%84%9F%E6%82%9F/"/>
    <url>/2020/10/28/%E5%A4%A7%E5%AD%A6%E4%B8%80%E5%B9%B4%E7%94%9F%E6%B4%BB%E7%9A%84%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<p>​      </p><p>大一生活最大的收获就是从经济转去了计算机，顺便在转去的时候拿了个一等奖学金。</p><p>​      大一的时候把全部精力都投入怎么提高绩点的路上了，其实现在想起来哦，好多东西都学的太迟了，在大一下的时候才从学长学姐那边了解到以后就业分前后端两个大方向，前端是做页面，在vue，react等主流框架下写代码，后端与数据库打交道，写完后写api接口给前端用，其实我最开始选择后端是因为赚钱多，毕竟后端的任务比较难，前端好上手，一写代码就能看到成果，但是好像以后就业活会比较枯燥比较机械，现在开始加入杭助后端，开始学golang和数据库，和大佬比学的太迟了。</p>  <h2>学习篇：</h2><p>​    在大一下疫情在家的时间，自学了c，学习了指针，链表，结构体，数据结构也学了栈，队列，还有到现在都没理解的分治算法（递归的方式看不懂），二叉树，还有自学了python，但是只能写写基础语法，然后在大一下学了前端的html和css语言（确实很好上手，没有什么逻辑关系，就是没有if语句这些判断），最后还有大一下买的吉他，谈了几天到学校就没时间谈学（现在已经积灰了）。</p> <h2>竞赛篇：</h2> <p>大一下参加证卷投资大赛，发现选导师真的很重要，如果他是你的评委老师你做的东西对他口味分数就会高，其实这个比赛策略组根本就不需要基础，导师会给你题目，给你模板和大概方向，你只需要一定时间把word写长和ppt做漂亮，然后给导师改一下，就能得奖。感觉统调，金融创新应该都差不多，含金量不高，还是大创含金量相对高一点，不过最后还是要花大量时间写word和ppt，一般比赛的时候熬夜是常态，推荐竞赛的话血推数模，acm（这比赛大一就要训练，一般人还参加不了），真的挺硬核。你说大一没人带不敢参加竞赛，其实感兴趣大胆参加，你说没想法，你可以只找一个最粗略的想法，然后找导师问问，如果最粗略也没有，只要你脸皮够厚，直接找导师要，毕竟你拿奖了对导师也有好处，最好早点找导师，迟了可能导师人太多不要你，这是我个人意见，看看就好了。（竞赛真的要多参加哦，说不定有意外惊喜，我女朋友就是竞赛认识的）</p>  <h2>社团篇：</h2><p>社团粗略分为三类，学生会杭助非技术部这种干活交朋友写策划社团，滑轮滑板等兴趣社团，红家、杭电助手技术部这种技术社团，当然还有这种特点都有的社团，我大一参加了经济学院学生会，说一下体验吧，几乎学院一半的人都加入了学生会，你可以在里面交到各种各样的人，还有部门联谊，部长也很亲切，不过一般最亲切的还是同部门的人，举办活动还有东西吃圣诞节还会给你送糖果吃，如果你加入了也最好别退，因为你退了的话本来属于你的活就要平均分配到其他小干事身上和部长身上。其实本质来说哦，就是招你去干活的，事情会挺多，真的贼多，好多活动会轮到你们部门出策划，大家就想想法，出策划，不过等你们部门想的活动节目顺利办完了的时候还是有点小成就感的。我感觉我不适合这种部门，而且竞赛和学业这两个事情有可能会和社团的事情重合，那就有你的爽了。兴趣社团我也去，杭助也才刚刚二面，等体验过了以后再说。</p><hr><p>  最后说说我最近的状态吧，等转到计算机，我熬夜已经成为常态，天天1点睡，4天有早课，然后水课补课，主要选了acm（这课很值），数据结构这种课，要花好长时间写作业，还有报了社团，得花很多时间学东西，还有勤工俭学，帮老师改作业，事情太多了，感觉最近人有点累和迷茫了，得找个时间出去散散心。<br>    1、不是特别清楚下一步怎么走，不知道怎么找老师怎么找项目做，2、不知道从学校到实习这一步改怎么走（打算问问已经工作学长学姐），3、不知道怎么去规划自己的后端学习路线（打算问问部长），好迷茫压，感觉最近学习效率也不高，学了一会不想学了。算了，其实也没关系，都是有办法解决的，跨过这座山，他们就会听见你的故事，先写到这里吧，等我 把这3个问题都解决了就更我的未来学习打算，恋爱部分这边不提了，我整一个完整的板块写。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/23/hello-world/"/>
    <url>/2020/10/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p class="note note-primary">这是我第一 篇blog，正式开启我的博客之路啦。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
